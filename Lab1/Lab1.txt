In this lab I wrote a baremetal software application from scratch  to send a "learn=in-depth:<my_name>" using UART on ARM VersatilePB.

I learned through this lab the following: Startup, linker, location counter, linker script symbols
Binary utilities: Objdump, strip, addr2line, size, readelf

Command lines:

Generate object file
arm-none-eabi-gcc.exe -c -I . -mcpu=arm926ej-s app.c -o app.o
-c        compile and assembler not link
-I .      to include header files in our path
-mcpu     to specify processor
-g        to get debug information
See sections of an object file
arm-none-eabi.objdump.exe -h app.o
See disassembly file of an object file
arm-none-eabi.objdump.exe -D app.o >> app.s
Get object file from assembly file
arm-none-eabi-as.exe -mcpu=arm926ej-s startup.s -o startup.o
See symbols of an object file
arm-none-eabi-nm.exe app.o
Link the object files and get the executable
arm-none-eabi-ld.exe -T linker_script.ld app.o startup.o -o learn-in-depth.elf
Get the map file
arm-none-eabi-ld.exe -T linker_script.ld -Map=map_file.map app.o startup.o -o learn-in-depth.elf
Get the binary file from the executable
arm-none-eabi-objcopy.exe -O binary learn-in-depth.elf learn-in-depth.bin
Run the binary file on Qemu
qemu-system-arm -M versatilepb -m 128M -nographic -kernel learn-in-depth.bni