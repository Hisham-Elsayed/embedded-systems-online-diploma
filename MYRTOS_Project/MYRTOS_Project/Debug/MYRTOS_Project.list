
MYRTOS_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef8  08000ef8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef8  08000ef8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef8  08000ef8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef8  08000ef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000efc  08000efc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000008  08000f08  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08000f08  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c93  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000960  00000000  00000000  00022cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00023628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000237e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039a8  00000000  00000000  00023960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d8c  00000000  00000000  00027308  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00010169  00000000  00000000  00029094  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000391fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  00039278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000e88 	.word	0x08000e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000e88 	.word	0x08000e88

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <task1>:
unsigned char payload2[3] = {3,4,5};



void task1()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	static int Count = 0;
	while(1)
	{
		//task 1 code
		Task1_LED ^= 1;
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <task1+0x50>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	f083 0301 	eor.w	r3, r3, #1
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b10      	ldr	r3, [pc, #64]	; (80001b0 <task1+0x50>)
 8000170:	701a      	strb	r2, [r3, #0]
		Count++;
 8000172:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <task1+0x54>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	3301      	adds	r3, #1
 8000178:	4a0e      	ldr	r2, [pc, #56]	; (80001b4 <task1+0x54>)
 800017a:	6013      	str	r3, [r2, #0]
		if(Count == 100)
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <task1+0x54>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b64      	cmp	r3, #100	; 0x64
 8000182:	d10a      	bne.n	800019a <task1+0x3a>
		{
			MYRTOS_AcquireMutex(&MUTEX1, &Task1);
 8000184:	490c      	ldr	r1, [pc, #48]	; (80001b8 <task1+0x58>)
 8000186:	480d      	ldr	r0, [pc, #52]	; (80001bc <task1+0x5c>)
 8000188:	f000 fe1e 	bl	8000dc8 <MYRTOS_AcquireMutex>
			MYRTOS_ActivateTask(&Task4);
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <task1+0x60>)
 800018e:	f000 fdbd 	bl	8000d0c <MYRTOS_ActivateTask>
			MYRTOS_AcquireMutex(&MUTEX2, &Task1);
 8000192:	4909      	ldr	r1, [pc, #36]	; (80001b8 <task1+0x58>)
 8000194:	480b      	ldr	r0, [pc, #44]	; (80001c4 <task1+0x64>)
 8000196:	f000 fe17 	bl	8000dc8 <MYRTOS_AcquireMutex>
			//MYRTOS_ActivateTask(&Task2);
			//MYRTOS_TaskWait(100,&Task1);	//Activate every 100ms
		}
		if(Count == 200)
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <task1+0x54>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2bc8      	cmp	r3, #200	; 0xc8
 80001a0:	d1e0      	bne.n	8000164 <task1+0x4>
		{
			Count = 0;
 80001a2:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <task1+0x54>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&MUTEX1);
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <task1+0x5c>)
 80001aa:	f000 fe2f 	bl	8000e0c <MYRTOS_ReleaseMutex>
		Task1_LED ^= 1;
 80001ae:	e7d9      	b.n	8000164 <task1+0x4>
 80001b0:	200000f0 	.word	0x200000f0
 80001b4:	20000024 	.word	0x20000024
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	2000007c 	.word	0x2000007c
 80001c0:	20000034 	.word	0x20000034
 80001c4:	200000f4 	.word	0x200000f4

080001c8 <task2>:
	}

}

void task2()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	static int Count = 0;
	while(1)
	{
		//task 2 code
		Task2_LED ^= 1;
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <task2+0x40>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	f083 0301 	eor.w	r3, r3, #1
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <task2+0x40>)
 80001d8:	701a      	strb	r2, [r3, #0]
		Count++;
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <task2+0x44>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <task2+0x44>)
 80001e2:	6013      	str	r3, [r2, #0]
		if(Count == 100)
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <task2+0x44>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b64      	cmp	r3, #100	; 0x64
 80001ea:	d102      	bne.n	80001f2 <task2+0x2a>
		{
			MYRTOS_ActivateTask(&Task3);
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <task2+0x48>)
 80001ee:	f000 fd8d 	bl	8000d0c <MYRTOS_ActivateTask>
		}
		if(Count == 200)
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <task2+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2bc8      	cmp	r3, #200	; 0xc8
 80001f8:	d1e8      	bne.n	80001cc <task2+0x4>
		{
			Count = 0;
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <task2+0x44>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task2);
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <task2+0x4c>)
 8000202:	f000 fd91 	bl	8000d28 <MYRTOS_TerminateTask>
		Task2_LED ^= 1;
 8000206:	e7e1      	b.n	80001cc <task2+0x4>
 8000208:	200001b0 	.word	0x200001b0
 800020c:	20000028 	.word	0x20000028
 8000210:	20000124 	.word	0x20000124
 8000214:	2000016c 	.word	0x2000016c

08000218 <task3>:
	}
}


void task3()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	static int Count = 0;
	while(1)
	{
		//task 3 code
		Task3_LED ^= 1;
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <task3+0x40>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2da      	uxtb	r2, r3
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <task3+0x40>)
 8000228:	701a      	strb	r2, [r3, #0]
		Count++;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <task3+0x44>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	3301      	adds	r3, #1
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <task3+0x44>)
 8000232:	6013      	str	r3, [r2, #0]
		if(Count == 100)
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <task3+0x44>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b64      	cmp	r3, #100	; 0x64
 800023a:	d102      	bne.n	8000242 <task3+0x2a>
		{
			MYRTOS_ActivateTask(&Task4);
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <task3+0x48>)
 800023e:	f000 fd65 	bl	8000d0c <MYRTOS_ActivateTask>
			//MYRTOS_TaskWait(100,&Task1);	//Activate every 100ms
		}
		if(Count==200)
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <task3+0x44>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2bc8      	cmp	r3, #200	; 0xc8
 8000248:	d1e8      	bne.n	800021c <task3+0x4>
		{
			Count=0;
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <task3+0x44>)
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task3);
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <task3+0x4c>)
 8000252:	f000 fd69 	bl	8000d28 <MYRTOS_TerminateTask>
		Task3_LED ^= 1;
 8000256:	e7e1      	b.n	800021c <task3+0x4>
 8000258:	20000078 	.word	0x20000078
 800025c:	2000002c 	.word	0x2000002c
 8000260:	20000034 	.word	0x20000034
 8000264:	20000124 	.word	0x20000124

08000268 <task4>:
	}
}


void task4()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	static int Count=0;
	while(1)
	{
		//task 4 code
		Task4_LED ^= 1;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <task4+0x50>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f083 0301 	eor.w	r3, r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <task4+0x50>)
 8000278:	701a      	strb	r2, [r3, #0]
		Count++;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <task4+0x54>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <task4+0x54>)
 8000282:	6013      	str	r3, [r2, #0]

		if(Count==3)
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <task4+0x54>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d107      	bne.n	800029c <task4+0x34>
		{
			MYRTOS_AcquireMutex(&MUTEX2, &Task4);
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <task4+0x58>)
 800028e:	480d      	ldr	r0, [pc, #52]	; (80002c4 <task4+0x5c>)
 8000290:	f000 fd9a 	bl	8000dc8 <MYRTOS_AcquireMutex>
			MYRTOS_AcquireMutex(&MUTEX1, &Task4);
 8000294:	490a      	ldr	r1, [pc, #40]	; (80002c0 <task4+0x58>)
 8000296:	480c      	ldr	r0, [pc, #48]	; (80002c8 <task4+0x60>)
 8000298:	f000 fd96 	bl	8000dc8 <MYRTOS_AcquireMutex>
		}
		if(Count==200)
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <task4+0x54>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2bc8      	cmp	r3, #200	; 0xc8
 80002a2:	d1e3      	bne.n	800026c <task4+0x4>
		{
			Count=0;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <task4+0x54>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&MUTEX1);
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <task4+0x60>)
 80002ac:	f000 fdae 	bl	8000e0c <MYRTOS_ReleaseMutex>
			MYRTOS_TerminateTask(&Task4);
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <task4+0x58>)
 80002b2:	f000 fd39 	bl	8000d28 <MYRTOS_TerminateTask>
		Task4_LED ^= 1;
 80002b6:	e7d9      	b.n	800026c <task4+0x4>
 80002b8:	20000168 	.word	0x20000168
 80002bc:	20000030 	.word	0x20000030
 80002c0:	20000034 	.word	0x20000034
 80002c4:	200000f4 	.word	0x200000f4
 80002c8:	2000007c 	.word	0x2000007c

080002cc <main>:
		}
		//MYRTOS_TaskWait(1000, &Task4);	//Activate every 1s
	}
}

int main(void) {
 80002cc:	b5b0      	push	{r4, r5, r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

	MYRTOS_errorID error;

	//HW_Init (initialize Clock Tree, Reset Controller)
	HW_Init();
 80002d2:	f000 f933 	bl	800053c <HW_Init>

	MUTEX1.payloadSize=3;
 80002d6:	4b48      	ldr	r3, [pc, #288]	; (80003f8 <main+0x12c>)
 80002d8:	2203      	movs	r2, #3
 80002da:	605a      	str	r2, [r3, #4]
	MUTEX1.pPayload = payload;
 80002dc:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <main+0x12c>)
 80002de:	4a47      	ldr	r2, [pc, #284]	; (80003fc <main+0x130>)
 80002e0:	601a      	str	r2, [r3, #0]
	strcpy(MUTEX1.MutexName,"mutex_shared(T1_T4)");
 80002e2:	4a47      	ldr	r2, [pc, #284]	; (8000400 <main+0x134>)
 80002e4:	4b47      	ldr	r3, [pc, #284]	; (8000404 <main+0x138>)
 80002e6:	4614      	mov	r4, r2
 80002e8:	461d      	mov	r5, r3
 80002ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ee:	682b      	ldr	r3, [r5, #0]
 80002f0:	6023      	str	r3, [r4, #0]

	MUTEX2.payloadSize=3;
 80002f2:	4b45      	ldr	r3, [pc, #276]	; (8000408 <main+0x13c>)
 80002f4:	2203      	movs	r2, #3
 80002f6:	605a      	str	r2, [r3, #4]
	MUTEX2.pPayload = payload2;
 80002f8:	4b43      	ldr	r3, [pc, #268]	; (8000408 <main+0x13c>)
 80002fa:	4a44      	ldr	r2, [pc, #272]	; (800040c <main+0x140>)
 80002fc:	601a      	str	r2, [r3, #0]
	strcpy(MUTEX2.MutexName,"mutex2_shared(T1_T4)");
 80002fe:	4a44      	ldr	r2, [pc, #272]	; (8000410 <main+0x144>)
 8000300:	4b44      	ldr	r3, [pc, #272]	; (8000414 <main+0x148>)
 8000302:	4614      	mov	r4, r2
 8000304:	461d      	mov	r5, r3
 8000306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800030e:	6020      	str	r0, [r4, #0]
 8000310:	3404      	adds	r4, #4
 8000312:	7021      	strb	r1, [r4, #0]

	if( MYRTOS_init() != NO_ERROR )
 8000314:	f000 fc3e 	bl	8000b94 <MYRTOS_init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d000      	beq.n	8000320 <main+0x54>
		while(1);
 800031e:	e7fe      	b.n	800031e <main+0x52>

	Task1.Stack_Size = 1024; 	//1K
 8000320:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <main+0x14c>)
 8000322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000326:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 8000328:	4b3b      	ldr	r3, [pc, #236]	; (8000418 <main+0x14c>)
 800032a:	4a3c      	ldr	r2, [pc, #240]	; (800041c <main+0x150>)
 800032c:	609a      	str	r2, [r3, #8]
	Task1.priority = 4;
 800032e:	4b3a      	ldr	r3, [pc, #232]	; (8000418 <main+0x14c>)
 8000330:	2204      	movs	r2, #4
 8000332:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName,"Task_1");
 8000334:	4b3a      	ldr	r3, [pc, #232]	; (8000420 <main+0x154>)
 8000336:	4a3b      	ldr	r2, [pc, #236]	; (8000424 <main+0x158>)
 8000338:	6810      	ldr	r0, [r2, #0]
 800033a:	6018      	str	r0, [r3, #0]
 800033c:	8891      	ldrh	r1, [r2, #4]
 800033e:	7992      	ldrb	r2, [r2, #6]
 8000340:	8099      	strh	r1, [r3, #4]
 8000342:	719a      	strb	r2, [r3, #6]

	Task2.Stack_Size = 1024; 	//1K
 8000344:	4b38      	ldr	r3, [pc, #224]	; (8000428 <main+0x15c>)
 8000346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800034a:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <main+0x15c>)
 800034e:	4a37      	ldr	r2, [pc, #220]	; (800042c <main+0x160>)
 8000350:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 8000352:	4b35      	ldr	r3, [pc, #212]	; (8000428 <main+0x15c>)
 8000354:	2203      	movs	r2, #3
 8000356:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName,"Task_2");
 8000358:	4b35      	ldr	r3, [pc, #212]	; (8000430 <main+0x164>)
 800035a:	4a36      	ldr	r2, [pc, #216]	; (8000434 <main+0x168>)
 800035c:	6810      	ldr	r0, [r2, #0]
 800035e:	6018      	str	r0, [r3, #0]
 8000360:	8891      	ldrh	r1, [r2, #4]
 8000362:	7992      	ldrb	r2, [r2, #6]
 8000364:	8099      	strh	r1, [r3, #4]
 8000366:	719a      	strb	r2, [r3, #6]

	Task3.Stack_Size = 1024; 	//1K
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <main+0x16c>)
 800036a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800036e:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <main+0x16c>)
 8000372:	4a32      	ldr	r2, [pc, #200]	; (800043c <main+0x170>)
 8000374:	609a      	str	r2, [r3, #8]
	Task3.priority = 2;
 8000376:	4b30      	ldr	r3, [pc, #192]	; (8000438 <main+0x16c>)
 8000378:	2202      	movs	r2, #2
 800037a:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName,"Task_3");
 800037c:	4b30      	ldr	r3, [pc, #192]	; (8000440 <main+0x174>)
 800037e:	4a31      	ldr	r2, [pc, #196]	; (8000444 <main+0x178>)
 8000380:	6810      	ldr	r0, [r2, #0]
 8000382:	6018      	str	r0, [r3, #0]
 8000384:	8891      	ldrh	r1, [r2, #4]
 8000386:	7992      	ldrb	r2, [r2, #6]
 8000388:	8099      	strh	r1, [r3, #4]
 800038a:	719a      	strb	r2, [r3, #6]

	Task4.Stack_Size = 1024; 	//1K
 800038c:	4b2e      	ldr	r3, [pc, #184]	; (8000448 <main+0x17c>)
 800038e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000392:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = task4;
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <main+0x17c>)
 8000396:	4a2d      	ldr	r2, [pc, #180]	; (800044c <main+0x180>)
 8000398:	609a      	str	r2, [r3, #8]
	Task4.priority = 1;
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <main+0x17c>)
 800039c:	2201      	movs	r2, #1
 800039e:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName,"Task_4");
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <main+0x184>)
 80003a2:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <main+0x188>)
 80003a4:	6810      	ldr	r0, [r2, #0]
 80003a6:	6018      	str	r0, [r3, #0]
 80003a8:	8891      	ldrh	r1, [r2, #4]
 80003aa:	7992      	ldrb	r2, [r2, #6]
 80003ac:	8099      	strh	r1, [r3, #4]
 80003ae:	719a      	strb	r2, [r3, #6]

	error += MYRTOS_CreateTask(&Task1);
 80003b0:	4819      	ldr	r0, [pc, #100]	; (8000418 <main+0x14c>)
 80003b2:	f000 fc6f 	bl	8000c94 <MYRTOS_CreateTask>
 80003b6:	4603      	mov	r3, r0
 80003b8:	461a      	mov	r2, r3
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4413      	add	r3, r2
 80003be:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 80003c0:	4819      	ldr	r0, [pc, #100]	; (8000428 <main+0x15c>)
 80003c2:	f000 fc67 	bl	8000c94 <MYRTOS_CreateTask>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4413      	add	r3, r2
 80003ce:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 80003d0:	4819      	ldr	r0, [pc, #100]	; (8000438 <main+0x16c>)
 80003d2:	f000 fc5f 	bl	8000c94 <MYRTOS_CreateTask>
 80003d6:	4603      	mov	r3, r0
 80003d8:	461a      	mov	r2, r3
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4413      	add	r3, r2
 80003de:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 80003e0:	4819      	ldr	r0, [pc, #100]	; (8000448 <main+0x17c>)
 80003e2:	f000 fc57 	bl	8000c94 <MYRTOS_CreateTask>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4413      	add	r3, r2
 80003ee:	71fb      	strb	r3, [r7, #7]


	MYRTOS_ActivateTask(&Task1);
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <main+0x14c>)
 80003f2:	f000 fc8b 	bl	8000d0c <MYRTOS_ActivateTask>
	//	MYRTOS_ActivateTask(&Task2);
	//	MYRTOS_ActivateTask(&Task3);


	while(1)
 80003f6:	e7fe      	b.n	80003f6 <main+0x12a>
 80003f8:	2000007c 	.word	0x2000007c
 80003fc:	20000000 	.word	0x20000000
 8000400:	2000008c 	.word	0x2000008c
 8000404:	08000ea0 	.word	0x08000ea0
 8000408:	200000f4 	.word	0x200000f4
 800040c:	20000004 	.word	0x20000004
 8000410:	20000104 	.word	0x20000104
 8000414:	08000eb4 	.word	0x08000eb4
 8000418:	200000ac 	.word	0x200000ac
 800041c:	08000161 	.word	0x08000161
 8000420:	200000c9 	.word	0x200000c9
 8000424:	08000ecc 	.word	0x08000ecc
 8000428:	2000016c 	.word	0x2000016c
 800042c:	080001c9 	.word	0x080001c9
 8000430:	20000189 	.word	0x20000189
 8000434:	08000ed4 	.word	0x08000ed4
 8000438:	20000124 	.word	0x20000124
 800043c:	08000219 	.word	0x08000219
 8000440:	20000141 	.word	0x20000141
 8000444:	08000edc 	.word	0x08000edc
 8000448:	20000034 	.word	0x20000034
 800044c:	08000269 	.word	0x08000269
 8000450:	20000051 	.word	0x20000051
 8000454:	08000ee4 	.word	0x08000ee4

08000458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800045a:	490c      	ldr	r1, [pc, #48]	; (800048c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a09      	ldr	r2, [pc, #36]	; (8000494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000470:	4c09      	ldr	r4, [pc, #36]	; (8000498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800047e:	f000 fcdf 	bl	8000e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff ff23 	bl	80002cc <main>
  bx lr
 8000486:	4770      	bx	lr
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000490:	08000f00 	.word	0x08000f00
  ldr r2, =_sbss
 8000494:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000498:	2000054c 	.word	0x2000054c

0800049c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_2_IRQHandler>
	...

080004a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db0a      	blt.n	80004ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	490c      	ldr	r1, [pc, #48]	; (80004ec <__NVIC_SetPriority+0x4c>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	0152      	lsls	r2, r2, #5
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	440b      	add	r3, r1
 80004c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004c8:	e00a      	b.n	80004e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4908      	ldr	r1, [pc, #32]	; (80004f0 <__NVIC_SetPriority+0x50>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	3b04      	subs	r3, #4
 80004d8:	0152      	lsls	r2, r2, #5
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	440b      	add	r3, r1
 80004de:	761a      	strb	r2, [r3, #24]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000e100 	.word	0xe000e100
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <HardFault_Handler>:
#include "CortexMX_OS_porting.h"

unsigned char Systick_LED;

void HardFault_Handler()
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	while(1);
 80004f8:	e7fe      	b.n	80004f8 <HardFault_Handler+0x4>

080004fa <BusFault_Handler>:
}

void BusFault_Handler()
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
	while(1);
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

}

void UsageFault_Handler()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	while(1);
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <MemManage_Handler>:

}

void MemManage_Handler()
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
	while(1);
 800050a:	e7fe      	b.n	800050a <MemManage_Handler+0x4>

0800050c <SVC_Handler>:



__attribute ((naked)) void SVC_Handler()
{
	__asm ("tst lr, #4 \n\t"
 800050c:	f01e 0f04 	tst.w	lr, #4
 8000510:	bf0c      	ite	eq
 8000512:	f3ef 8008 	mrseq	r0, MSP
 8000516:	f3ef 8009 	mrsne	r0, PSP
 800051a:	f000 bac1 	b.w	8000aa0 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 800051e:	bf00      	nop

08000520 <trigger_OS_PendSV>:

void trigger_OS_PendSV()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSTSET_Msk;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <trigger_OS_PendSV+0x18>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a03      	ldr	r2, [pc, #12]	; (8000538 <trigger_OS_PendSV+0x18>)
 800052a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800052e:	6053      	str	r3, [r2, #4]

}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <HW_Init>:


void HW_Init()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
		// 1 count -> 0.125 us
		// X count -> 1 ms
		// X = 8000 Count

	//decrease pendSV priority to be smaller or equal to systick timer
	__NVIC_SetPriority(PendSV_IRQn, 15);
 8000540:	210f      	movs	r1, #15
 8000542:	f06f 0001 	mvn.w	r0, #1
 8000546:	f7ff ffab 	bl	80004a0 <__NVIC_SetPriority>

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <SysTick_Handler>:
	 */
	SysTick_Config(8000);
}

void SysTick_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	Systick_LED ^= 1;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <SysTick_Handler+0x24>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <SysTick_Handler+0x24>)
 8000560:	701a      	strb	r2, [r3, #0]
	MYRTOS_Update_TaskWaitingTime();
 8000562:	f000 fbef 	bl	8000d44 <MYRTOS_Update_TaskWaitingTime>
	//determine_pCurrent & pNext
	Decide_WhatNext();
 8000566:	f000 fa4f 	bl	8000a08 <Decide_WhatNext>
	//Switch Context & Restore
	trigger_OS_PendSV();
 800056a:	f7ff ffd9 	bl	8000520 <trigger_OS_PendSV>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200001b1 	.word	0x200001b1

08000578 <FIFO_init>:

#include "MYRTOS_FIFO.h"

//FIFO APIs
FIFO_Buf_Status FIFO_init(FIFO_Buf_t* fifo, element_type* buf,uint32_t length)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	if (buf == NULL)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d101      	bne.n	800058e <FIFO_init+0x16>
		return FIFO_null;
 800058a:	2303      	movs	r3, #3
 800058c:	e00f      	b.n	80005ae <FIFO_init+0x36>

	fifo->base = buf;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	609a      	str	r2, [r3, #8]
	fifo->head = buf;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	60da      	str	r2, [r3, #12]
	fifo->tail = buf;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	611a      	str	r2, [r3, #16]
	fifo->length = length;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
	fifo->count = 0;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]

	return FIFO_no_error;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <FIFO_enqueue>:

FIFO_Buf_Status FIFO_enqueue(FIFO_Buf_t* fifo, element_type item)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	if (!fifo->base || !fifo->head || !fifo->tail)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d007      	beq.n	80005da <FIFO_enqueue+0x22>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d003      	beq.n	80005da <FIFO_enqueue+0x22>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <FIFO_enqueue+0x26>
		return FIFO_null;
 80005da:	2303      	movs	r3, #3
 80005dc:	e025      	b.n	800062a <FIFO_enqueue+0x72>

	//fifo is full
	if ( FIFO_IS_FULL(fifo) == FIFO_full)
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f864 	bl	80006ac <FIFO_IS_FULL>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d101      	bne.n	80005ee <FIFO_enqueue+0x36>
		return FIFO_full;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e01d      	b.n	800062a <FIFO_enqueue+0x72>

	*(fifo->head)=item;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	601a      	str	r2, [r3, #0]
	fifo->count++;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	605a      	str	r2, [r3, #4]

	//circular fifo
	if(fifo->head == (fifo->base + (fifo->length * sizeof(element_type))))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	429a      	cmp	r2, r3
 8000612:	d104      	bne.n	800061e <FIFO_enqueue+0x66>
		fifo->head = fifo->base;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	e004      	b.n	8000628 <FIFO_enqueue+0x70>
	else
		fifo->head++;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	60da      	str	r2, [r3, #12]

	return FIFO_no_error;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <FIFO_dequeue>:

FIFO_Buf_Status FIFO_dequeue(FIFO_Buf_t* fifo, element_type* item)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	if (!fifo->base || !fifo->head || !fifo->tail)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <FIFO_dequeue+0x22>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <FIFO_dequeue+0x22>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <FIFO_dequeue+0x26>
		return FIFO_null;
 8000654:	2303      	movs	r3, #3
 8000656:	e024      	b.n	80006a2 <FIFO_dequeue+0x70>
	//check fifo is empty ?
	if(fifo->count == 0)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <FIFO_dequeue+0x32>
		return FIFO_empty;
 8000660:	2302      	movs	r3, #2
 8000662:	e01e      	b.n	80006a2 <FIFO_dequeue+0x70>

	*item = *(fifo->tail);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	601a      	str	r2, [r3, #0]
	fifo->count--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]

	if(fifo->tail == (fifo->base + (fifo->length * sizeof(element_type))))
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691a      	ldr	r2, [r3, #16]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6899      	ldr	r1, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	440b      	add	r3, r1
 8000688:	429a      	cmp	r2, r3
 800068a:	d104      	bne.n	8000696 <FIFO_dequeue+0x64>
		fifo->tail = fifo->base;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	e004      	b.n	80006a0 <FIFO_dequeue+0x6e>
	else
		fifo->tail++;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	1d1a      	adds	r2, r3, #4
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]


	return FIFO_no_error;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <FIFO_IS_FULL>:

FIFO_Buf_Status FIFO_IS_FULL(FIFO_Buf_t* fifo)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	if (!fifo->base || !fifo->head || !fifo->tail)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d007      	beq.n	80006cc <FIFO_IS_FULL+0x20>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <FIFO_IS_FULL+0x20>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d101      	bne.n	80006d0 <FIFO_IS_FULL+0x24>
		return FIFO_null;
 80006cc:	2303      	movs	r3, #3
 80006ce:	e008      	b.n	80006e2 <FIFO_IS_FULL+0x36>

	if(fifo->count == fifo->length)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d101      	bne.n	80006e0 <FIFO_IS_FULL+0x34>
		return FIFO_full;
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <FIFO_IS_FULL+0x36>
	return FIFO_no_error;
 80006e0:	2300      	movs	r3, #0

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:
{
	/***************************************
	 * Save the context of the Current Task*
	 **************************************/
	//Get the current Task "Current PSP" from CPU register as CPU pushes xPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80006ec:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <PendSV_Handler+0x1c0>)
 80006ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f2:	f3ef 8009 	mrs	r0, PSP
 80006f6:	4602      	mov	r2, r0
 80006f8:	619a      	str	r2, [r3, #24]

	//using this PSP (Current PSP) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 80006fa:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <PendSV_Handler+0x1c0>)
 80006fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	3a04      	subs	r2, #4
 8000704:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 8000706:	4b69      	ldr	r3, [pc, #420]	; (80008ac <PendSV_Handler+0x1c0>)
 8000708:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4622      	mov	r2, r4
 8000710:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000712:	4b66      	ldr	r3, [pc, #408]	; (80008ac <PendSV_Handler+0x1c0>)
 8000714:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	3a04      	subs	r2, #4
 800071c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 800071e:	4b63      	ldr	r3, [pc, #396]	; (80008ac <PendSV_Handler+0x1c0>)
 8000720:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	462a      	mov	r2, r5
 8000728:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800072a:	4b60      	ldr	r3, [pc, #384]	; (80008ac <PendSV_Handler+0x1c0>)
 800072c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	3a04      	subs	r2, #4
 8000734:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 8000736:	4b5d      	ldr	r3, [pc, #372]	; (80008ac <PendSV_Handler+0x1c0>)
 8000738:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4632      	mov	r2, r6
 8000740:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000742:	4b5a      	ldr	r3, [pc, #360]	; (80008ac <PendSV_Handler+0x1c0>)
 8000744:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	3a04      	subs	r2, #4
 800074c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 800074e:	4b57      	ldr	r3, [pc, #348]	; (80008ac <PendSV_Handler+0x1c0>)
 8000750:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	463a      	mov	r2, r7
 8000758:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800075a:	4b54      	ldr	r3, [pc, #336]	; (80008ac <PendSV_Handler+0x1c0>)
 800075c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	3a04      	subs	r2, #4
 8000764:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 8000766:	4b51      	ldr	r3, [pc, #324]	; (80008ac <PendSV_Handler+0x1c0>)
 8000768:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4642      	mov	r2, r8
 8000770:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000772:	4b4e      	ldr	r3, [pc, #312]	; (80008ac <PendSV_Handler+0x1c0>)
 8000774:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	3a04      	subs	r2, #4
 800077c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <PendSV_Handler+0x1c0>)
 8000780:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	464a      	mov	r2, r9
 8000788:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <PendSV_Handler+0x1c0>)
 800078c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	3a04      	subs	r2, #4
 8000794:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <PendSV_Handler+0x1c0>)
 8000798:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4652      	mov	r2, sl
 80007a0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <PendSV_Handler+0x1c0>)
 80007a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	3a04      	subs	r2, #4
 80007ac:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r"(*(OS_Control.CurrentTask->Current_PSP)));
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <PendSV_Handler+0x1c0>)
 80007b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	465a      	mov	r2, fp
 80007b8:	601a      	str	r2, [r3, #0]


	/******************************************
	 * Restore the context of the Current Task*
	 ******************************************/
	if(OS_Control.NextTask != NULL)
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <PendSV_Handler+0x1c0>)
 80007bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d009      	beq.n	80007d8 <PendSV_Handler+0xec>
	{
		OS_Control.CurrentTask = OS_Control.NextTask;
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <PendSV_Handler+0x1c0>)
 80007c6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80007ca:	4a38      	ldr	r2, [pc, #224]	; (80008ac <PendSV_Handler+0x1c0>)
 80007cc:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <PendSV_Handler+0x1c0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile ("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <PendSV_Handler+0x1c0>)
 80007da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <PendSV_Handler+0x1c0>)
 80007e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ea:	699a      	ldr	r2, [r3, #24]
 80007ec:	3204      	adds	r2, #4
 80007ee:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80007f0:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <PendSV_Handler+0x1c0>)
 80007f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <PendSV_Handler+0x1c0>)
 80007fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000802:	699a      	ldr	r2, [r3, #24]
 8000804:	3204      	adds	r2, #4
 8000806:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <PendSV_Handler+0x1c0>)
 800080a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <PendSV_Handler+0x1c0>)
 8000816:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081a:	699a      	ldr	r2, [r3, #24]
 800081c:	3204      	adds	r2, #4
 800081e:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <PendSV_Handler+0x1c0>)
 8000822:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <PendSV_Handler+0x1c0>)
 800082e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	3204      	adds	r2, #4
 8000836:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <PendSV_Handler+0x1c0>)
 800083a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <PendSV_Handler+0x1c0>)
 8000846:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	3204      	adds	r2, #4
 800084e:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <PendSV_Handler+0x1c0>)
 8000852:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <PendSV_Handler+0x1c0>)
 800085e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000862:	699a      	ldr	r2, [r3, #24]
 8000864:	3204      	adds	r2, #4
 8000866:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <PendSV_Handler+0x1c0>)
 800086a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <PendSV_Handler+0x1c0>)
 8000876:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800087a:	699a      	ldr	r2, [r3, #24]
 800087c:	3204      	adds	r2, #4
 800087e:	619a      	str	r2, [r3, #24]
	__asm volatile ("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <PendSV_Handler+0x1c0>)
 8000882:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <PendSV_Handler+0x1c0>)
 800088e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	3204      	adds	r2, #4
 8000896:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <PendSV_Handler+0x1c0>)
 800089a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 80008a6:	4770      	bx	lr
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	200001b4 	.word	0x200001b4

080008b0 <bubbleSort>:


void bubbleSort()
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_ref* temp;
	n= OS_Control.NoOfActiveTasks;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <bubbleSort+0x8c>)
 80008b8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80008bc:	607b      	str	r3, [r7, #4]
	for(i=0 ; i < n-1 ; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e030      	b.n	8000926 <bubbleSort+0x76>
	{
		for(j=0 ; j < n-i-1 ; j++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	e023      	b.n	8000912 <bubbleSort+0x62>
		{
			if(OS_Control.OSTask[j]->priority > OS_Control.OSTask[j+1]->priority)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <bubbleSort+0x8c>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	791a      	ldrb	r2, [r3, #4]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4918      	ldr	r1, [pc, #96]	; (800093c <bubbleSort+0x8c>)
 80008da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d913      	bls.n	800090c <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTask[j];
 80008e4:	4a15      	ldr	r2, [pc, #84]	; (800093c <bubbleSort+0x8c>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	603b      	str	r3, [r7, #0]
				OS_Control.OSTask[j] = OS_Control.OSTask[j+1];
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <bubbleSort+0x8c>)
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	4910      	ldr	r1, [pc, #64]	; (800093c <bubbleSort+0x8c>)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTask[j+1] = temp;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	490d      	ldr	r1, [pc, #52]	; (800093c <bubbleSort+0x8c>)
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0 ; j < n-i-1 ; j++)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3301      	adds	r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	3b01      	subs	r3, #1
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3d4      	bcc.n	80008ca <bubbleSort+0x1a>
	for(i=0 ; i < n-1 ; i++)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3301      	adds	r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	d3c9      	bcc.n	80008c4 <bubbleSort+0x14>
			}
		}
	}
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200001b4 	.word	0x200001b4

08000940 <MyRTOS_Update_Schedule_table>:



void MyRTOS_Update_Schedule_table()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
	int i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]

	/* 1- bubble sort Scheduler table OS_Control->OSTask[100] (Priority from High to Low)
	 * 2- free Ready Queue
	 * 3- update Ready Queue
	 */
	bubbleSort();
 800094e:	f7ff ffaf 	bl	80008b0 <bubbleSort>
	while(FIFO_dequeue(&Ready_QUEUE, &temp /*Pointer to Pointer*/) != FIFO_empty);
 8000952:	bf00      	nop
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4829      	ldr	r0, [pc, #164]	; (8000a00 <MyRTOS_Update_Schedule_table+0xc0>)
 800095a:	f7ff fe6a 	bl	8000632 <FIFO_dequeue>
 800095e:	4603      	mov	r3, r0
 8000960:	2b02      	cmp	r3, #2
 8000962:	d1f7      	bne.n	8000954 <MyRTOS_Update_Schedule_table+0x14>
	while(i < OS_Control.NoOfActiveTasks)
 8000964:	e03f      	b.n	80009e6 <MyRTOS_Update_Schedule_table+0xa6>
	{
		pTask = OS_Control.OSTask[i];
 8000966:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <MyRTOS_Update_Schedule_table+0xc4>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	60bb      	str	r3, [r7, #8]
		pNextTask = OS_Control.OSTask[i+1];
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <MyRTOS_Update_Schedule_table+0xc4>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	607b      	str	r3, [r7, #4]
		if(pTask->TaskState != Suspend)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	7f1b      	ldrb	r3, [r3, #28]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d02d      	beq.n	80009e0 <MyRTOS_Update_Schedule_table+0xa0>
		{
			//in case we reached to the end of available OS Tasks
			if(pNextTask->TaskState == Suspend)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7f1b      	ldrb	r3, [r3, #28]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <MyRTOS_Update_Schedule_table+0x5c>
			{
				FIFO_enqueue(&Ready_QUEUE, pTask);
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	481c      	ldr	r0, [pc, #112]	; (8000a00 <MyRTOS_Update_Schedule_table+0xc0>)
 8000990:	f7ff fe12 	bl	80005b8 <FIFO_enqueue>
				pTask->TaskState = Ready;
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2203      	movs	r2, #3
 8000998:	771a      	strb	r2, [r3, #28]
				break;
 800099a:	e02c      	b.n	80009f6 <MyRTOS_Update_Schedule_table+0xb6>
			}
			// in case pTask priority is higher than the next one (lower number in priority means it has a higher priority)
			if(pTask->priority < pNextTask->priority)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	791a      	ldrb	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <MyRTOS_Update_Schedule_table+0x78>
			{
				FIFO_enqueue(&Ready_QUEUE, pTask);
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <MyRTOS_Update_Schedule_table+0xc0>)
 80009ac:	f7ff fe04 	bl	80005b8 <FIFO_enqueue>
				pTask->TaskState = Ready;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2203      	movs	r2, #3
 80009b4:	771a      	strb	r2, [r3, #28]
				break;
 80009b6:	e01e      	b.n	80009f6 <MyRTOS_Update_Schedule_table+0xb6>
			}
			/* if both pTask and pNextTask both have the same priority
			 * 	Push pTask to ready state
			 * 	make pTask = pNextTask and pNextTask++
			 */
			else if(pTask->priority == pNextTask->priority)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	791a      	ldrb	r2, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d107      	bne.n	80009d4 <MyRTOS_Update_Schedule_table+0x94>
			{
				FIFO_enqueue(&Ready_QUEUE, pTask);
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	480e      	ldr	r0, [pc, #56]	; (8000a00 <MyRTOS_Update_Schedule_table+0xc0>)
 80009c8:	f7ff fdf6 	bl	80005b8 <FIFO_enqueue>
				pTask->TaskState = Ready;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2203      	movs	r2, #3
 80009d0:	771a      	strb	r2, [r3, #28]
 80009d2:	e005      	b.n	80009e0 <MyRTOS_Update_Schedule_table+0xa0>
			}
			// not allowed to happen as we already reordered it by the bubblesort function
			else if(pTask->priority > pNextTask->priority)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	791a      	ldrb	r2, [r3, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d809      	bhi.n	80009f4 <MyRTOS_Update_Schedule_table+0xb4>
			{
				break;
			}

		}
		i++;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
	while(i < OS_Control.NoOfActiveTasks)
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MyRTOS_Update_Schedule_table+0xc4>)
 80009e8:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8b9      	bhi.n	8000966 <MyRTOS_Update_Schedule_table+0x26>
	}
}
 80009f2:	e000      	b.n	80009f6 <MyRTOS_Update_Schedule_table+0xb6>
				break;
 80009f4:	bf00      	nop
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000364 	.word	0x20000364
 8000a04:	200001b4 	.word	0x200001b4

08000a08 <Decide_WhatNext>:


void Decide_WhatNext()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	// check if ready queue is empty and current task is not suspended
	if(Ready_QUEUE.count == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <Decide_WhatNext+0x8c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d118      	bne.n	8000a46 <Decide_WhatNext+0x3e>
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a1a:	7f1b      	ldrb	r3, [r3, #28]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d012      	beq.n	8000a46 <Decide_WhatNext+0x3e>
	{
		OS_Control.CurrentTask->TaskState = Running;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a26:	2201      	movs	r2, #1
 8000a28:	771a      	strb	r2, [r3, #28]
		// add the current task again (round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <Decide_WhatNext+0x8c>)
 8000a34:	f7ff fdc0 	bl	80005b8 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a3a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3e:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a40:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}
}
 8000a44:	e024      	b.n	8000a90 <Decide_WhatNext+0x88>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 8000a46:	4915      	ldr	r1, [pc, #84]	; (8000a9c <Decide_WhatNext+0x94>)
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <Decide_WhatNext+0x8c>)
 8000a4a:	f7ff fdf2 	bl	8000632 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a50:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a54:	2201      	movs	r2, #1
 8000a56:	771a      	strb	r2, [r3, #28]
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority) && (OS_Control.CurrentTask->TaskState != Suspend))
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a5e:	791a      	ldrb	r2, [r3, #4]
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a62:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d111      	bne.n	8000a90 <Decide_WhatNext+0x88>
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a6e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a72:	7f1b      	ldrb	r3, [r3, #28]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <Decide_WhatNext+0x88>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <Decide_WhatNext+0x8c>)
 8000a82:	f7ff fd99 	bl	80005b8 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <Decide_WhatNext+0x90>)
 8000a88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	771a      	strb	r2, [r3, #28]
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000364 	.word	0x20000364
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	20000358 	.word	0x20000358

08000aa0 <OS_SVC>:

//to execute specific OS service (Handler Mode)
void OS_SVC(int* StackFramePointer)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> r0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : r0,r1,r2,r3,r12,LR,PC,xPSR
	unsigned char SVC_number;
	SVC_number =  *((unsigned char*)((unsigned char*)StackFramePointer[6])-2);	//PC
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3318      	adds	r3, #24
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b02      	subs	r3, #2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db1f      	blt.n	8000afa <OS_SVC+0x5a>
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	dd02      	ble.n	8000ac4 <OS_SVC+0x24>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d017      	beq.n	8000af2 <OS_SVC+0x52>
		break;
	case SVC_TaskWaitingTime:
		MyRTOS_Update_Schedule_table();
		break;
	}
}
 8000ac2:	e01a      	b.n	8000afa <OS_SVC+0x5a>
		MyRTOS_Update_Schedule_table();
 8000ac4:	f7ff ff3c 	bl	8000940 <MyRTOS_Update_Schedule_table>
		if(OS_Control.OSmodeID == OSRunning)
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <OS_SVC+0x64>)
 8000aca:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d112      	bne.n	8000af8 <OS_SVC+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName,"idleTask") != 0)
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <OS_SVC+0x64>)
 8000ad4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ad8:	331d      	adds	r3, #29
 8000ada:	490b      	ldr	r1, [pc, #44]	; (8000b08 <OS_SVC+0x68>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb35 	bl	800014c <strcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <OS_SVC+0x58>
				Decide_WhatNext();
 8000ae8:	f7ff ff8e 	bl	8000a08 <Decide_WhatNext>
				trigger_OS_PendSV();
 8000aec:	f7ff fd18 	bl	8000520 <trigger_OS_PendSV>
		break;
 8000af0:	e002      	b.n	8000af8 <OS_SVC+0x58>
		MyRTOS_Update_Schedule_table();
 8000af2:	f7ff ff25 	bl	8000940 <MyRTOS_Update_Schedule_table>
		break;
 8000af6:	e000      	b.n	8000afa <OS_SVC+0x5a>
		break;
 8000af8:	bf00      	nop
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001b4 	.word	0x200001b4
 8000b08:	08000eec 	.word	0x08000eec

08000b0c <MYRTOS_OS_SVC_Set>:
/**********************************************************************/

//Thread Mode
void MYRTOS_OS_SVC_Set (SVC_ID ID)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d006      	beq.n	8000b2a <MYRTOS_OS_SVC_Set+0x1e>
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d006      	beq.n	8000b2e <MYRTOS_OS_SVC_Set+0x22>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d000      	beq.n	8000b26 <MYRTOS_OS_SVC_Set+0x1a>
		break;
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}
}
 8000b24:	e005      	b.n	8000b32 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 8000b26:	df00      	svc	0
		break;
 8000b28:	e003      	b.n	8000b32 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000b2a:	df01      	svc	1
		break;
 8000b2c:	e001      	b.n	8000b32 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 8000b2e:	df02      	svc	2
		break;
 8000b30:	bf00      	nop
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <MYRTOS_IdleTask>:


unsigned char IdleTask_LED;

void MYRTOS_IdleTask()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTask_LED ^= 1;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <MYRTOS_IdleTask+0x18>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f083 0301 	eor.w	r3, r3, #1
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <MYRTOS_IdleTask+0x18>)
 8000b4c:	701a      	strb	r2, [r3, #0]
		__asm("wfe");	//System wait for event...
 8000b4e:	bf20      	wfe
		IdleTask_LED ^= 1;
 8000b50:	e7f6      	b.n	8000b40 <MYRTOS_IdleTask+0x4>
 8000b52:	bf00      	nop
 8000b54:	20000360 	.word	0x20000360

08000b58 <MYRTOS_Create_MainStack>:
}



void MYRTOS_Create_MainStack()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = (unsigned int)&_estack;
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <MYRTOS_Create_MainStack+0x34>)
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MYRTOS_Create_MainStack+0x38>)
 8000b60:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize ;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MYRTOS_Create_MainStack+0x38>)
 8000b66:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000b6a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <MYRTOS_Create_MainStack+0x38>)
 8000b70:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP Tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MYRTOS_Create_MainStack+0x38>)
 8000b76:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000b7a:	3b08      	subs	r3, #8
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <MYRTOS_Create_MainStack+0x38>)
 8000b7e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if(OS_Control._E_MSP_Task < &_eheap);	//error: exceeded the available heap size
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20002800 	.word	0x20002800
 8000b90:	200001b4 	.word	0x200001b4

08000b94 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NO_ERROR;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MYRTOS_init+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN Stack for OS
	MYRTOS_Create_MainStack();
 8000ba6:	f7ff ffd7 	bl	8000b58 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if(FIFO_init(&Ready_QUEUE,Ready_QUEUE_FIFO, 100) != FIFO_no_error)
 8000baa:	2264      	movs	r2, #100	; 0x64
 8000bac:	4914      	ldr	r1, [pc, #80]	; (8000c00 <MYRTOS_init+0x6c>)
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <MYRTOS_init+0x70>)
 8000bb0:	f7ff fce2 	bl	8000578 <FIFO_init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_init_error;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
	}


	//Configure IDLE Task
	strcpy(MYRTOS_idleTask.TaskName,"idleTask");
 8000bc0:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <MYRTOS_init+0x74>)
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MYRTOS_init+0x78>)
 8000bc4:	cb03      	ldmia	r3!, {r0, r1}
 8000bc6:	6010      	str	r0, [r2, #0]
 8000bc8:	6051      	str	r1, [r2, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	7213      	strb	r3, [r2, #8]
	MYRTOS_idleTask.priority = 255;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MYRTOS_init+0x7c>)
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MYRTOS_init+0x7c>)
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <MYRTOS_init+0x80>)
 8000bd8:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MYRTOS_init+0x7c>)
 8000bdc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000be0:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MYRTOS_init+0x7c>)
 8000be4:	f000 f856 	bl	8000c94 <MYRTOS_CreateTask>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4413      	add	r3, r2
 8000bf0:	71fb      	strb	r3, [r7, #7]


	return error;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001b4 	.word	0x200001b4
 8000c00:	200003bc 	.word	0x200003bc
 8000c04:	20000364 	.word	0x20000364
 8000c08:	20000395 	.word	0x20000395
 8000c0c:	08000eec 	.word	0x08000eec
 8000c10:	20000378 	.word	0x20000378
 8000c14:	08000b3d 	.word	0x08000b3d

08000c18 <MyRtos_Create_TaskStack>:

void MyRtos_Create_TaskStack(Task_ref* Tref)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	 * r0
	 * =========
	 *r5,r6,r7,r8,r9,r10,r11 (Saved/Restored) Manually
	 */

	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP--;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	1f1a      	subs	r2, r3, #4
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	619a      	str	r2, [r3, #24]

	*(Tref->Current_PSP) = 0x01000000;		// DUMMY_XPSR T should be = 1 to avoid BUS Fault
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c3c:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	1f1a      	subs	r2, r3, #4
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP = (unsigned int)Tref -> p_TaskEntry;	//PC
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;				//LR
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	1f1a      	subs	r2, r3, #4
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD;	//LR = 0xFFFFFFFD (EXC_RETURN) return to thread with PSP
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f06f 0202 	mvn.w	r2, #2
 8000c62:	601a      	str	r2, [r3, #0]

	for(int j=0 ; j<13 ; j++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e00b      	b.n	8000c82 <MyRtos_Create_TaskStack+0x6a>
	{
		Tref->Current_PSP--;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	1f1a      	subs	r2, r3, #4
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
	for(int j=0 ; j<13 ; j++)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b0c      	cmp	r3, #12
 8000c86:	ddf0      	ble.n	8000c6a <MyRtos_Create_TaskStack+0x52>
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <MYRTOS_CreateTask>:

MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NO_ERROR;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

	//Check task size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000ca2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad2      	subs	r2, r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	615a      	str	r2, [r3, #20]
	if(Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MYRTOS_CreateTask+0x74>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d201      	bcs.n	8000cc6 <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e01a      	b.n	8000cfc <MYRTOS_CreateTask+0x68>
	// -					-
	//
	//		8 bytes space
	//
	// -	_eheap			-
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	3b08      	subs	r3, #8
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000cce:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRtos_Create_TaskStack(Tref);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa0 	bl	8000c18 <MyRtos_Create_TaskStack>

	//Update Scheduler table
	OS_Control.OSTask[OS_Control.NoOfActiveTasks] = Tref;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000cda:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000cde:	4909      	ldr	r1, [pc, #36]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000ce8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <MYRTOS_CreateTask+0x70>)
 8000cf0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task state update -> Suspend
	Tref->TaskState = Suspend;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	771a      	strb	r2, [r3, #28]

	return error;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001b4 	.word	0x200001b4
 8000d08:	20000b50 	.word	0x20000b50

08000d0c <MYRTOS_ActivateTask>:




void MYRTOS_ActivateTask(Task_ref* Tref)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	771a      	strb	r2, [r3, #28]
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fef6 	bl	8000b0c <MYRTOS_OS_SVC_Set>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MYRTOS_TerminateTask>:

void MYRTOS_TerminateTask(Task_ref* Tref)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	771a      	strb	r2, [r3, #28]
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fee8 	bl	8000b0c <MYRTOS_OS_SVC_Set>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MYRTOS_Update_TaskWaitingTime>:
	SelfTref->TaskState = Suspend;
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
}

void MYRTOS_Update_TaskWaitingTime()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	for (int i=0 ; i < OS_Control.NoOfActiveTasks ; i++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	e02f      	b.n	8000db0 <MYRTOS_Update_TaskWaitingTime+0x6c>
	{
		if(OS_Control.OSTask[i]->TaskState == Suspend) //it is blocked until meeting the timeline
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	7f1b      	ldrb	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d125      	bne.n	8000daa <MYRTOS_Update_TaskWaitingTime+0x66>
		{
			if(OS_Control.OSTask[i]->TimingWaiting.Blocking == Enable)
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d11d      	bne.n	8000daa <MYRTOS_Update_TaskWaitingTime+0x66>
			{
				OS_Control.OSTask[i]->TimingWaiting.Ticks_Count--;
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OSTask[i]->TimingWaiting.Ticks_Count == 0)
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <MYRTOS_Update_TaskWaitingTime+0x66>
				{
					OS_Control.OSTask[i]->TimingWaiting.Blocking = Disable;
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTask[i]->TaskState = Waiting;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	2202      	movs	r2, #2
 8000da2:	771a      	strb	r2, [r3, #28]
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff feb1 	bl	8000b0c <MYRTOS_OS_SVC_Set>
	for (int i=0 ; i < OS_Control.NoOfActiveTasks ; i++)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3301      	adds	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <MYRTOS_Update_TaskWaitingTime+0x80>)
 8000db2:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8c9      	bhi.n	8000d50 <MYRTOS_Update_TaskWaitingTime+0xc>
				}
			}
		}
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200001b4 	.word	0x200001b4

08000dc8 <MYRTOS_AcquireMutex>:


MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_ref* Mref,Task_ref* Tref)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	if(Mref->CurrentUser == NULL)	//not taken by any task
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <MYRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentUser = Tref;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	e00f      	b.n	8000e02 <MYRTOS_AcquireMutex+0x3a>
	}
	else
	{
		if(Mref->NextUser == NULL)	//not pending request by any other task
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <MYRTOS_AcquireMutex+0x36>
		{
			Mref->NextUser = Tref;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	60da      	str	r2, [r3, #12]
			//move to suspend state until released
			Tref->TaskState = Suspend;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	771a      	strb	r2, [r3, #28]
			MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe88 	bl	8000b0c <MYRTOS_OS_SVC_Set>
 8000dfc:	e001      	b.n	8000e02 <MYRTOS_AcquireMutex+0x3a>
		}
		else						//there is a pending request by another task
		{
			return MutexisReachedToMaxNumberOfUsers;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e000      	b.n	8000e04 <MYRTOS_AcquireMutex+0x3c>
		}
	}
	return NO_ERROR;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <MYRTOS_ReleaseMutex>:


void MYRTOS_ReleaseMutex(Mutex_ref* Mref)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(Mref->CurrentUser != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00d      	beq.n	8000e38 <MYRTOS_ReleaseMutex+0x2c>
	{
		Mref->CurrentUser = Mref->NextUser;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	609a      	str	r2, [r3, #8]
		Mref->NextUser = NULL;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
		Mref->CurrentUser->TaskState = Waiting;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	771a      	strb	r2, [r3, #28]
		MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe6a 	bl	8000b0c <MYRTOS_OS_SVC_Set>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <__libc_init_array>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	2500      	movs	r5, #0
 8000e44:	4e0c      	ldr	r6, [pc, #48]	; (8000e78 <__libc_init_array+0x38>)
 8000e46:	4c0d      	ldr	r4, [pc, #52]	; (8000e7c <__libc_init_array+0x3c>)
 8000e48:	1ba4      	subs	r4, r4, r6
 8000e4a:	10a4      	asrs	r4, r4, #2
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	d109      	bne.n	8000e64 <__libc_init_array+0x24>
 8000e50:	f000 f81a 	bl	8000e88 <_init>
 8000e54:	2500      	movs	r5, #0
 8000e56:	4e0a      	ldr	r6, [pc, #40]	; (8000e80 <__libc_init_array+0x40>)
 8000e58:	4c0a      	ldr	r4, [pc, #40]	; (8000e84 <__libc_init_array+0x44>)
 8000e5a:	1ba4      	subs	r4, r4, r6
 8000e5c:	10a4      	asrs	r4, r4, #2
 8000e5e:	42a5      	cmp	r5, r4
 8000e60:	d105      	bne.n	8000e6e <__libc_init_array+0x2e>
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e68:	4798      	blx	r3
 8000e6a:	3501      	adds	r5, #1
 8000e6c:	e7ee      	b.n	8000e4c <__libc_init_array+0xc>
 8000e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e72:	4798      	blx	r3
 8000e74:	3501      	adds	r5, #1
 8000e76:	e7f2      	b.n	8000e5e <__libc_init_array+0x1e>
 8000e78:	08000ef8 	.word	0x08000ef8
 8000e7c:	08000ef8 	.word	0x08000ef8
 8000e80:	08000ef8 	.word	0x08000ef8
 8000e84:	08000efc 	.word	0x08000efc

08000e88 <_init>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr

08000e94 <_fini>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	bf00      	nop
 8000e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9a:	bc08      	pop	{r3}
 8000e9c:	469e      	mov	lr, r3
 8000e9e:	4770      	bx	lr
