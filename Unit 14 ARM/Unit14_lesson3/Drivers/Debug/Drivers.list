
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a24  08000a24  00010a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a24  08000a2c  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a24  08000a24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000a2c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000a2c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002701  00000000  00000000  00010a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000616  00000000  00000000  00013156  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006cc  00000000  00000000  0001376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000130  00000000  00000000  00013e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00013f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000006d9  00000000  00000000  00014060  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000140c  00000000  00000000  00014739  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000090ae  00000000  00000000  00015b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001ebf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a4  00000000  00000000  0001ec70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a00 	.word	0x08000a00

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a00 	.word	0x08000a00

08000170 <EXTI9_Callback>:
unsigned int IRQ_Flag = 0;



void EXTI9_Callback(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag=1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI9_Callback+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <main>:


int main(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN();
 800018e:	4b16      	ldr	r3, [pc, #88]	; (80001e8 <main+0x60>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a15      	ldr	r2, [pc, #84]	; (80001e8 <main+0x60>)
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <main+0x60>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a12      	ldr	r2, [pc, #72]	; (80001e8 <main+0x60>)
 80001a0:	f043 0308 	orr.w	r3, r3, #8
 80001a4:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x60>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <main+0x60>)
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	6193      	str	r3, [r2, #24]

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 80001b2:	4a0e      	ldr	r2, [pc, #56]	; (80001ec <main+0x64>)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 80001bc:	2300      	movs	r3, #0
 80001be:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <main+0x68>)
 80001c2:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE;
 80001c4:	2300      	movs	r3, #0
 80001c6:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 fad8 	bl	8000780 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag =1;
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <main+0x6c>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]

	/* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 80001d6:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <main+0x6c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d0fb      	beq.n	80001d6 <main+0x4e>
		{
			IRQ_Flag =0;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <main+0x6c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80001e4:	e7f7      	b.n	80001d6 <main+0x4e>
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	08000a18 	.word	0x08000a18
 80001f0:	08000171 	.word	0x08000171
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fbc7 	bl	80009b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f7ff ffad 	bl	8000188 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	08000a2c 	.word	0x08000a2c
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	2000005c 	.word	0x2000005c

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>

0800024a <Get_CRLH_Position>:



//Function used to get the position
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	4603      	mov	r3, r0
 8000252:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000254:	88fb      	ldrh	r3, [r7, #6]
 8000256:	2b80      	cmp	r3, #128	; 0x80
 8000258:	d042      	beq.n	80002e0 <Get_CRLH_Position+0x96>
 800025a:	2b80      	cmp	r3, #128	; 0x80
 800025c:	dc11      	bgt.n	8000282 <Get_CRLH_Position+0x38>
 800025e:	2b08      	cmp	r3, #8
 8000260:	d036      	beq.n	80002d0 <Get_CRLH_Position+0x86>
 8000262:	2b08      	cmp	r3, #8
 8000264:	dc06      	bgt.n	8000274 <Get_CRLH_Position+0x2a>
 8000266:	2b02      	cmp	r3, #2
 8000268:	d02e      	beq.n	80002c8 <Get_CRLH_Position+0x7e>
 800026a:	2b04      	cmp	r3, #4
 800026c:	d02e      	beq.n	80002cc <Get_CRLH_Position+0x82>
 800026e:	2b01      	cmp	r3, #1
 8000270:	d028      	beq.n	80002c4 <Get_CRLH_Position+0x7a>
 8000272:	e047      	b.n	8000304 <Get_CRLH_Position+0xba>
 8000274:	2b20      	cmp	r3, #32
 8000276:	d02f      	beq.n	80002d8 <Get_CRLH_Position+0x8e>
 8000278:	2b40      	cmp	r3, #64	; 0x40
 800027a:	d02f      	beq.n	80002dc <Get_CRLH_Position+0x92>
 800027c:	2b10      	cmp	r3, #16
 800027e:	d029      	beq.n	80002d4 <Get_CRLH_Position+0x8a>
 8000280:	e040      	b.n	8000304 <Get_CRLH_Position+0xba>
 8000282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000286:	d033      	beq.n	80002f0 <Get_CRLH_Position+0xa6>
 8000288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800028c:	dc09      	bgt.n	80002a2 <Get_CRLH_Position+0x58>
 800028e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000292:	d029      	beq.n	80002e8 <Get_CRLH_Position+0x9e>
 8000294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000298:	d028      	beq.n	80002ec <Get_CRLH_Position+0xa2>
 800029a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800029e:	d021      	beq.n	80002e4 <Get_CRLH_Position+0x9a>
 80002a0:	e030      	b.n	8000304 <Get_CRLH_Position+0xba>
 80002a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002a6:	d027      	beq.n	80002f8 <Get_CRLH_Position+0xae>
 80002a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002ac:	dc03      	bgt.n	80002b6 <Get_CRLH_Position+0x6c>
 80002ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002b2:	d01f      	beq.n	80002f4 <Get_CRLH_Position+0xaa>
 80002b4:	e026      	b.n	8000304 <Get_CRLH_Position+0xba>
 80002b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002ba:	d01f      	beq.n	80002fc <Get_CRLH_Position+0xb2>
 80002bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002c0:	d01e      	beq.n	8000300 <Get_CRLH_Position+0xb6>
 80002c2:	e01f      	b.n	8000304 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	e01e      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80002c8:	2304      	movs	r3, #4
 80002ca:	e01c      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80002cc:	2308      	movs	r3, #8
 80002ce:	e01a      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80002d0:	230c      	movs	r3, #12
 80002d2:	e018      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80002d4:	2310      	movs	r3, #16
 80002d6:	e016      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80002d8:	2314      	movs	r3, #20
 80002da:	e014      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80002dc:	2318      	movs	r3, #24
 80002de:	e012      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80002e0:	231c      	movs	r3, #28
 80002e2:	e010      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	e00e      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80002e8:	2304      	movs	r3, #4
 80002ea:	e00c      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80002ec:	2308      	movs	r3, #8
 80002ee:	e00a      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80002f0:	230c      	movs	r3, #12
 80002f2:	e008      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80002f4:	2310      	movs	r3, #16
 80002f6:	e006      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80002f8:	2314      	movs	r3, #20
 80002fa:	e004      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80002fc:	2318      	movs	r3, #24
 80002fe:	e002      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000300:	231c      	movs	r3, #28
 8000302:	e000      	b.n	8000306 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000304:	2300      	movs	r3, #0
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) Configures PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) Configures PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL : &GPIOx->CRH ;
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	2bff      	cmp	r3, #255	; 0xff
 8000328:	d801      	bhi.n	800032e <MCAL_GPIO_Init+0x1e>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	e001      	b.n	8000332 <MCAL_GPIO_Init+0x22>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3304      	adds	r3, #4
 8000332:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~( 0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber) ) ;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff86 	bl	800024a <Get_CRLH_Position>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	230f      	movs	r3, #15
 8000344:	4093      	lsls	r3, r2
 8000346:	43da      	mvns	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	401a      	ands	r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	789b      	ldrb	r3, [r3, #2]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d00b      	beq.n	8000372 <MCAL_GPIO_Init+0x62>
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	789b      	ldrb	r3, [r3, #2]
 800035e:	2b06      	cmp	r3, #6
 8000360:	d007      	beq.n	8000372 <MCAL_GPIO_Init+0x62>
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b05      	cmp	r3, #5
 8000368:	d003      	beq.n	8000372 <MCAL_GPIO_Init+0x62>
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	789b      	ldrb	r3, [r3, #2]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d10e      	bne.n	8000390 <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	789b      	ldrb	r3, [r3, #2]
 8000376:	3b04      	subs	r3, #4
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	b25a      	sxtb	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	b25b      	sxtb	r3, r3
 8000382:	4313      	orrs	r3, r2
 8000384:	b25b      	sxtb	r3, r3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 030f 	and.w	r3, r3, #15
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e02c      	b.n	80003ea <MCAL_GPIO_Init+0xda>

	}
	//if Pin is input
	else	//MODE = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d003      	beq.n	80003a0 <MCAL_GPIO_Init+0x90>
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	789b      	ldrb	r3, [r3, #2]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d107      	bne.n	80003b0 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE ) << 2) | 0x0) & 0x0F ) ;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 030f 	and.w	r3, r3, #15
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	e01c      	b.n	80003ea <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)		//Consider it as input floating
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	2b08      	cmp	r3, #8
 80003b6:	d102      	bne.n	80003be <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLOAT ) << 2) | 0x0) & 0x0F ) ;
 80003b8:	2304      	movs	r3, #4
 80003ba:	73fb      	strb	r3, [r7, #15]
 80003bc:	e015      	b.n	80003ea <MCAL_GPIO_Init+0xda>
		}
		else	//PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0F ) ;
 80003be:	2308      	movs	r3, #8
 80003c0:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	789b      	ldrb	r3, [r3, #2]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d107      	bne.n	80003da <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	8812      	ldrh	r2, [r2, #0]
 80003d2:	431a      	orrs	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	e007      	b.n	80003ea <MCAL_GPIO_Init+0xda>

			}
			else	//GPIO_MODE_INPUT_PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	8812      	ldrh	r2, [r2, #0]
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	401a      	ands	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003ea:	7bfc      	ldrb	r4, [r7, #15]
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff ff2a 	bl	800024a <Get_CRLH_Position>
 80003f6:	4603      	mov	r3, r0
 80003f8:	fa04 f203 	lsl.w	r2, r4, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	431a      	orrs	r2, r3
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bd90      	pop	{r4, r7, pc}
	...

08000410 <Enable_NVIC>:

/***********************************************************************************************************
 *                                          Generic Functions                                              *
 ***********************************************************************************************************/
void Enable_NVIC (uint16_t IRQ)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	2b0f      	cmp	r3, #15
 800041e:	d854      	bhi.n	80004ca <Enable_NVIC+0xba>
 8000420:	a201      	add	r2, pc, #4	; (adr r2, 8000428 <Enable_NVIC+0x18>)
 8000422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000426:	bf00      	nop
 8000428:	08000469 	.word	0x08000469
 800042c:	08000477 	.word	0x08000477
 8000430:	08000485 	.word	0x08000485
 8000434:	08000493 	.word	0x08000493
 8000438:	080004a1 	.word	0x080004a1
 800043c:	080004af 	.word	0x080004af
 8000440:	080004af 	.word	0x080004af
 8000444:	080004af 	.word	0x080004af
 8000448:	080004af 	.word	0x080004af
 800044c:	080004af 	.word	0x080004af
 8000450:	080004bd 	.word	0x080004bd
 8000454:	080004bd 	.word	0x080004bd
 8000458:	080004bd 	.word	0x080004bd
 800045c:	080004bd 	.word	0x080004bd
 8000460:	080004bd 	.word	0x080004bd
 8000464:	080004bd 	.word	0x080004bd
	{
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <Enable_NVIC+0xc4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <Enable_NVIC+0xc4>)
 800046e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000472:	6013      	str	r3, [r2, #0]
		break;
 8000474:	e029      	b.n	80004ca <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ6_EXTI1_ENABLE;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <Enable_NVIC+0xc4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <Enable_NVIC+0xc4>)
 800047c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000480:	6013      	str	r3, [r2, #0]
		break;
 8000482:	e022      	b.n	80004ca <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ6_EXTI2_ENABLE;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <Enable_NVIC+0xc4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <Enable_NVIC+0xc4>)
 800048a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800048e:	6013      	str	r3, [r2, #0]
		break;
 8000490:	e01b      	b.n	80004ca <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ6_EXTI3_ENABLE;
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <Enable_NVIC+0xc4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <Enable_NVIC+0xc4>)
 8000498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800049c:	6013      	str	r3, [r2, #0]
		break;
 800049e:	e014      	b.n	80004ca <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ6_EXTI4_ENABLE;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <Enable_NVIC+0xc4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <Enable_NVIC+0xc4>)
 80004a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004aa:	6013      	str	r3, [r2, #0]
		break;
 80004ac:	e00d      	b.n	80004ca <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ6_EXTI5_9_ENABLE;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <Enable_NVIC+0xc4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <Enable_NVIC+0xc4>)
 80004b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004b8:	6013      	str	r3, [r2, #0]
		break;
 80004ba:	e006      	b.n	80004ca <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ6_EXTI10_15_ENABLE;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <Enable_NVIC+0xc8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <Enable_NVIC+0xc8>)
 80004c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c6:	6013      	str	r3, [r2, #0]
		break;
 80004c8:	bf00      	nop
	}
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	e000e100 	.word	0xe000e100
 80004d8:	e000e104 	.word	0xe000e104

080004dc <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d854      	bhi.n	8000596 <Disable_NVIC+0xba>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <Disable_NVIC+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	08000535 	.word	0x08000535
 80004f8:	08000543 	.word	0x08000543
 80004fc:	08000551 	.word	0x08000551
 8000500:	0800055f 	.word	0x0800055f
 8000504:	0800056d 	.word	0x0800056d
 8000508:	0800057b 	.word	0x0800057b
 800050c:	0800057b 	.word	0x0800057b
 8000510:	0800057b 	.word	0x0800057b
 8000514:	0800057b 	.word	0x0800057b
 8000518:	0800057b 	.word	0x0800057b
 800051c:	08000589 	.word	0x08000589
 8000520:	08000589 	.word	0x08000589
 8000524:	08000589 	.word	0x08000589
 8000528:	08000589 	.word	0x08000589
 800052c:	08000589 	.word	0x08000589
 8000530:	08000589 	.word	0x08000589
	{
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <Disable_NVIC+0xc4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <Disable_NVIC+0xc4>)
 800053a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800053e:	6013      	str	r3, [r2, #0]
		break;
 8000540:	e029      	b.n	8000596 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ6_EXTI1_DISABLE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <Disable_NVIC+0xc4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <Disable_NVIC+0xc4>)
 8000548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054c:	6013      	str	r3, [r2, #0]
		break;
 800054e:	e022      	b.n	8000596 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ6_EXTI2_DISABLE;
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <Disable_NVIC+0xc4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <Disable_NVIC+0xc4>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055a:	6013      	str	r3, [r2, #0]
		break;
 800055c:	e01b      	b.n	8000596 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ6_EXTI3_DISABLE;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <Disable_NVIC+0xc4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <Disable_NVIC+0xc4>)
 8000564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000568:	6013      	str	r3, [r2, #0]
		break;
 800056a:	e014      	b.n	8000596 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ6_EXTI4_DISABLE;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <Disable_NVIC+0xc4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <Disable_NVIC+0xc4>)
 8000572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000576:	6013      	str	r3, [r2, #0]
		break;
 8000578:	e00d      	b.n	8000596 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ6_EXTI5_9_DISABLE;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <Disable_NVIC+0xc4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <Disable_NVIC+0xc4>)
 8000580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000584:	6013      	str	r3, [r2, #0]
		break;
 8000586:	e006      	b.n	8000596 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ6_EXTI10_15_DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <Disable_NVIC+0xc8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <Disable_NVIC+0xc8>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000592:	6013      	str	r3, [r2, #0]
		break;
 8000594:	bf00      	nop
	}
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	e000e180 	.word	0xe000e180
 80005a4:	e000e184 	.word	0xe000e184

080005a8 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> Floating INPUT
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOAT ;
 80005b6:	2301      	movs	r3, #1
 80005b8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg) ;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f107 0208 	add.w	r2, r7, #8
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fea3 	bl	8000310 <MCAL_GPIO_Init>
	//==================================================================
	//2- Update AFIO to Route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_postion = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0303 	and.w	r3, r3, #3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_postion) ;
 80005e4:	4a5f      	ldr	r2, [pc, #380]	; (8000764 <Update_EXTI+0x1bc>)
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3302      	adds	r3, #2
 80005ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	210f      	movs	r1, #15
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	495a      	ldr	r1, [pc, #360]	; (8000764 <Update_EXTI+0x1bc>)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	4002      	ands	r2, r0
 8000600:	3302      	adds	r3, #2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF)<< AFIO_EXTICR_postion) ;
 8000606:	4a57      	ldr	r2, [pc, #348]	; (8000764 <Update_EXTI+0x1bc>)
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	3302      	adds	r3, #2
 800060c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4954      	ldr	r1, [pc, #336]	; (8000768 <Update_EXTI+0x1c0>)
 8000616:	428b      	cmp	r3, r1
 8000618:	d016      	beq.n	8000648 <Update_EXTI+0xa0>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4953      	ldr	r1, [pc, #332]	; (800076c <Update_EXTI+0x1c4>)
 8000620:	428b      	cmp	r3, r1
 8000622:	d00f      	beq.n	8000644 <Update_EXTI+0x9c>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4951      	ldr	r1, [pc, #324]	; (8000770 <Update_EXTI+0x1c8>)
 800062a:	428b      	cmp	r3, r1
 800062c:	d008      	beq.n	8000640 <Update_EXTI+0x98>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4950      	ldr	r1, [pc, #320]	; (8000774 <Update_EXTI+0x1cc>)
 8000634:	428b      	cmp	r3, r1
 8000636:	d101      	bne.n	800063c <Update_EXTI+0x94>
 8000638:	2303      	movs	r3, #3
 800063a:	e006      	b.n	800064a <Update_EXTI+0xa2>
 800063c:	2300      	movs	r3, #0
 800063e:	e004      	b.n	800064a <Update_EXTI+0xa2>
 8000640:	2302      	movs	r3, #2
 8000642:	e002      	b.n	800064a <Update_EXTI+0xa2>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <Update_EXTI+0xa2>
 8000648:	2300      	movs	r3, #0
 800064a:	7bb9      	ldrb	r1, [r7, #14]
 800064c:	408b      	lsls	r3, r1
 800064e:	4618      	mov	r0, r3
 8000650:	4944      	ldr	r1, [pc, #272]	; (8000764 <Update_EXTI+0x1bc>)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4302      	orrs	r2, r0
 8000656:	3302      	adds	r3, #2
 8000658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==================================================================
	//3- Update Rising or Falling Register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <Update_EXTI+0x1d0>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	8812      	ldrh	r2, [r2, #0]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	43d2      	mvns	r2, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a42      	ldr	r2, [pc, #264]	; (8000778 <Update_EXTI+0x1d0>)
 8000670:	400b      	ands	r3, r1
 8000672:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000674:	4b40      	ldr	r3, [pc, #256]	; (8000778 <Update_EXTI+0x1d0>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	8812      	ldrh	r2, [r2, #0]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	43d2      	mvns	r2, r2
 8000684:	4611      	mov	r1, r2
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <Update_EXTI+0x1d0>)
 8000688:	400b      	ands	r3, r1
 800068a:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7b1b      	ldrb	r3, [r3, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10b      	bne.n	80006ac <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <Update_EXTI+0x1d0>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a34      	ldr	r2, [pc, #208]	; (8000778 <Update_EXTI+0x1d0>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6093      	str	r3, [r2, #8]
 80006aa:	e029      	b.n	8000700 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7b1b      	ldrb	r3, [r3, #12]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d10b      	bne.n	80006cc <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <Update_EXTI+0x1d0>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	408a      	lsls	r2, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <Update_EXTI+0x1d0>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	60d3      	str	r3, [r2, #12]
 80006ca:	e019      	b.n	8000700 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7b1b      	ldrb	r3, [r3, #12]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d115      	bne.n	8000700 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <Update_EXTI+0x1d0>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	8812      	ldrh	r2, [r2, #0]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a24      	ldr	r2, [pc, #144]	; (8000778 <Update_EXTI+0x1d0>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <Update_EXTI+0x1d0>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	8812      	ldrh	r2, [r2, #0]
 80006f2:	4611      	mov	r1, r2
 80006f4:	2201      	movs	r2, #1
 80006f6:	408a      	lsls	r2, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <Update_EXTI+0x1d0>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	60d3      	str	r3, [r2, #12]
	}
	//==================================================================
	//4- Update IRQ Handling CALLBACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <Update_EXTI+0x1d4>)
 800070c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==================================================================
	//5- Enable/Disable IRQ EXTI & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7b5b      	ldrb	r3, [r3, #13]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d110      	bne.n	800073a <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <Update_EXTI+0x1d0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	8812      	ldrh	r2, [r2, #0]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	4611      	mov	r1, r2
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <Update_EXTI+0x1d0>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fe6c 	bl	8000410 <Enable_NVIC>
	else
	{
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 8000738:	e010      	b.n	800075c <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <Update_EXTI+0x1d0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	4611      	mov	r1, r2
 8000744:	2201      	movs	r2, #1
 8000746:	408a      	lsls	r2, r1
 8000748:	43d2      	mvns	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <Update_EXTI+0x1d0>)
 800074e:	400b      	ands	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fec0 	bl	80004dc <Disable_NVIC>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40010000 	.word	0x40010000
 8000768:	40010800 	.word	0x40010800
 800076c:	40010c00 	.word	0x40010c00
 8000770:	40011000 	.word	0x40011000
 8000774:	40011400 	.word	0x40011400
 8000778:	40010400 	.word	0x40010400
 800077c:	20000020 	.word	0x20000020

08000780 <MCAL_EXTI_GPIO_Init>:
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					- but LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 * 					- Also Mandatory to enable RCC clock for AFIO and corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff0d 	bl	80005a8 <Update_EXTI>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <EXTI0_IRQHandler>:
/***********************************************************************************************************
 *                                          ISR Functions		                                           *
 ***********************************************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <EXTI0_IRQHandler+0x1c>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <EXTI0_IRQHandler+0x1c>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <EXTI0_IRQHandler+0x20>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4798      	blx	r3
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010400 	.word	0x40010400
 80007b8:	20000020 	.word	0x20000020

080007bc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <EXTI1_IRQHandler+0x1c>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <EXTI1_IRQHandler+0x1c>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <EXTI1_IRQHandler+0x20>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4798      	blx	r3
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010400 	.word	0x40010400
 80007dc:	20000020 	.word	0x20000020

080007e0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <EXTI2_IRQHandler+0x1c>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <EXTI2_IRQHandler+0x1c>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <EXTI2_IRQHandler+0x20>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4798      	blx	r3
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40010400 	.word	0x40010400
 8000800:	20000020 	.word	0x20000020

08000804 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <EXTI3_IRQHandler+0x1c>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <EXTI3_IRQHandler+0x1c>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <EXTI3_IRQHandler+0x20>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	4798      	blx	r3
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40010400 	.word	0x40010400
 8000824:	20000020 	.word	0x20000020

08000828 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <EXTI4_IRQHandler+0x1c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <EXTI4_IRQHandler+0x1c>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <EXTI4_IRQHandler+0x20>)
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010400 	.word	0x40010400
 8000848:	20000020 	.word	0x20000020

0800084c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <EXTI9_5_IRQHandler+0x22>
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6153      	str	r3, [r2, #20]
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <EXTI9_5_IRQHandler+0xa4>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	2b00      	cmp	r3, #0
 8000878:	d008      	beq.n	800088c <EXTI9_5_IRQHandler+0x40>
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <EXTI9_5_IRQHandler+0xa4>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000894:	2b00      	cmp	r3, #0
 8000896:	d008      	beq.n	80008aa <EXTI9_5_IRQHandler+0x5e>
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 800089e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a2:	6153      	str	r3, [r2, #20]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <EXTI9_5_IRQHandler+0xa4>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d008      	beq.n	80008c8 <EXTI9_5_IRQHandler+0x7c>
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <EXTI9_5_IRQHandler+0xa4>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <EXTI9_5_IRQHandler+0x9a>
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <EXTI9_5_IRQHandler+0xa0>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6153      	str	r3, [r2, #20]
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <EXTI9_5_IRQHandler+0xa4>)
 80008e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e4:	4798      	blx	r3
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40010400 	.word	0x40010400
 80008f0:	20000020 	.word	0x20000020

080008f4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000900:	2b00      	cmp	r3, #0
 8000902:	d008      	beq.n	8000916 <EXTI15_10_IRQHandler+0x22>
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 800090a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090e:	6153      	str	r3, [r2, #20]
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <EXTI15_10_IRQHandler+0x40>
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 8000930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000932:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d008      	beq.n	8000952 <EXTI15_10_IRQHandler+0x5e>
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094a:	6153      	str	r3, [r2, #20]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d008      	beq.n	8000970 <EXTI15_10_IRQHandler+0x7c>
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000964:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 800096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <EXTI15_10_IRQHandler+0x9a>
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6153      	str	r3, [r2, #20]
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 800098a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d008      	beq.n	80009ac <EXTI15_10_IRQHandler+0xb8>
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <EXTI15_10_IRQHandler+0xbc>)
 80009a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <EXTI15_10_IRQHandler+0xc0>)
 80009a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009aa:	4798      	blx	r3
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40010400 	.word	0x40010400
 80009b4:	20000020 	.word	0x20000020

080009b8 <__libc_init_array>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	2500      	movs	r5, #0
 80009bc:	4e0c      	ldr	r6, [pc, #48]	; (80009f0 <__libc_init_array+0x38>)
 80009be:	4c0d      	ldr	r4, [pc, #52]	; (80009f4 <__libc_init_array+0x3c>)
 80009c0:	1ba4      	subs	r4, r4, r6
 80009c2:	10a4      	asrs	r4, r4, #2
 80009c4:	42a5      	cmp	r5, r4
 80009c6:	d109      	bne.n	80009dc <__libc_init_array+0x24>
 80009c8:	f000 f81a 	bl	8000a00 <_init>
 80009cc:	2500      	movs	r5, #0
 80009ce:	4e0a      	ldr	r6, [pc, #40]	; (80009f8 <__libc_init_array+0x40>)
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <__libc_init_array+0x44>)
 80009d2:	1ba4      	subs	r4, r4, r6
 80009d4:	10a4      	asrs	r4, r4, #2
 80009d6:	42a5      	cmp	r5, r4
 80009d8:	d105      	bne.n	80009e6 <__libc_init_array+0x2e>
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e0:	4798      	blx	r3
 80009e2:	3501      	adds	r5, #1
 80009e4:	e7ee      	b.n	80009c4 <__libc_init_array+0xc>
 80009e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ea:	4798      	blx	r3
 80009ec:	3501      	adds	r5, #1
 80009ee:	e7f2      	b.n	80009d6 <__libc_init_array+0x1e>
 80009f0:	08000a24 	.word	0x08000a24
 80009f4:	08000a24 	.word	0x08000a24
 80009f8:	08000a24 	.word	0x08000a24
 80009fc:	08000a28 	.word	0x08000a28

08000a00 <_init>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr

08000a0c <_fini>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	bf00      	nop
 8000a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a12:	bc08      	pop	{r3}
 8000a14:	469e      	mov	lr, r3
 8000a16:	4770      	bx	lr
