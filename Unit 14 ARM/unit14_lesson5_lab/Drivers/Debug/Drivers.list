
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  080005cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080005cc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c75  00000000  00000000  000105f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004a1  00000000  00000000  0001226a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000698  00000000  00000000  0001270b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000128  00000000  00000000  00012da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00012ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001590  00000000  00000000  00012fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000f17  00000000  00000000  00014560  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000eabd  00000000  00000000  00015477  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023f34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000039c  00000000  00000000  00023fb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005ac 	.word	0x080005ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005ac 	.word	0x080005ac

08000170 <HardFault_Handler>:
	unprivileged

};

void HardFault_Handler()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <BusFault_Handler>:

void BusFault_Handler()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <UsageFault_Handler>:

void UsageFault_Handler()
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <PendSV_Handler>:

	}
}

void PendSV_Handler()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <OS_SVC_services>:

void OS_SVC_services(int* StackFramePointer)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b087      	sub	sp, #28
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack : r0,r1,r2,r3,r12,LR,PC,xPSR

	unsigned char SVC_number;
	unsigned int val1,val2;

	SVC_number =  *((unsigned char*)((unsigned char*)StackFramePointer[6])-2);	//PC
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3318      	adds	r3, #24
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	3b02      	subs	r3, #2
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	75fb      	strb	r3, [r7, #23]
	val1 = StackFramePointer[0];
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	613b      	str	r3, [r7, #16]
	val2 = StackFramePointer[1];
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	3304      	adds	r3, #4
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	60fb      	str	r3, [r7, #12]
	switch(SVC_number)
 80001c2:	7dfb      	ldrb	r3, [r7, #23]
 80001c4:	3b01      	subs	r3, #1
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d827      	bhi.n	800021a <OS_SVC_services+0x7a>
 80001ca:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <OS_SVC_services+0x30>)
 80001cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d0:	080001e1 	.word	0x080001e1
 80001d4:	080001ef 	.word	0x080001ef
 80001d8:	080001fd 	.word	0x080001fd
 80001dc:	0800020d 	.word	0x0800020d
	{
	case 1:	//ADD
		StackFramePointer[0] = val1 + val2;
 80001e0:	693a      	ldr	r2, [r7, #16]
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	4413      	add	r3, r2
 80001e6:	461a      	mov	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	601a      	str	r2, [r3, #0]
			break;
 80001ec:	e015      	b.n	800021a <OS_SVC_services+0x7a>
		case 2: //SUB
			StackFramePointer[0] = val1 - val2;
 80001ee:	693a      	ldr	r2, [r7, #16]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	1ad3      	subs	r3, r2, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	601a      	str	r2, [r3, #0]
			break;
 80001fa:	e00e      	b.n	800021a <OS_SVC_services+0x7a>
		case 3: //MULT
			StackFramePointer[0] = val1 * val2;
 80001fc:	693b      	ldr	r3, [r7, #16]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	461a      	mov	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
			break;
 800020a:	e006      	b.n	800021a <OS_SVC_services+0x7a>
		case 4: //PendSV
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <OS_SVC_services+0x84>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <OS_SVC_services+0x84>)
 8000212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000216:	6053      	str	r3, [r2, #4]
			break;
 8000218:	bf00      	nop
	}
}
 800021a:	bf00      	nop
 800021c:	371c      	adds	r7, #28
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <SVC_Handler>:

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4 \n\t"
 8000228:	f01e 0f04 	tst.w	lr, #4
 800022c:	bf0c      	ite	eq
 800022e:	f3ef 8008 	mrseq	r0, MSP
 8000232:	f3ef 8009 	mrsne	r0, PSP
 8000236:	f7ff bfb3 	b.w	80001a0 <OS_SVC_services>
		  "ITE EQ \n\t"
		  "mrseq r0,MSP \n\t"
	      "mrsne r0,PSP \n\t"
		  "B OS_SVC_services");

}
 800023a:	bf00      	nop

0800023c <OS_SVC_Set>:


int OS_SVC_Set(int a,int b,int SVC_ID)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
	int result;

	switch(SVC_ID)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	2b03      	cmp	r3, #3
 800024e:	d813      	bhi.n	8000278 <OS_SVC_Set+0x3c>
 8000250:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <OS_SVC_Set+0x1c>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	08000269 	.word	0x08000269
 800025c:	0800026d 	.word	0x0800026d
 8000260:	08000271 	.word	0x08000271
 8000264:	08000275 	.word	0x08000275
	{
	case 1:	//ADD
		__asm("svc #0x01");
 8000268:	df01      	svc	1
		break;
 800026a:	e005      	b.n	8000278 <OS_SVC_Set+0x3c>
	case 2: //SUB
		__asm("svc #0x02");
 800026c:	df02      	svc	2
		break;
 800026e:	e003      	b.n	8000278 <OS_SVC_Set+0x3c>
	case 3: //MULT
		__asm("svc #0x03");
 8000270:	df03      	svc	3
		break;
 8000272:	e001      	b.n	8000278 <OS_SVC_Set+0x3c>

	case 4: //PENDSV
		__asm("svc #0x04");
 8000274:	df04      	svc	4
		break;
 8000276:	bf00      	nop
	}

	__asm("mov %0 , r0": "=r" (result));
 8000278:	4603      	mov	r3, r0
 800027a:	617b      	str	r3, [r7, #20]
	return result;
 800027c:	697b      	ldr	r3, [r7, #20]
}
 800027e:	4618      	mov	r0, r3
 8000280:	371c      	adds	r7, #28
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <main>:


int main(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	//
	//	IRQ_Flag =1;
	//	//SWITCH_CPU_AccessLevel(unprivileged);

	/* Loop forever */
	IRQ_Flag=1;
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <main+0x64>)
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3, 3, 1);	//add
 8000292:	2201      	movs	r2, #1
 8000294:	2103      	movs	r1, #3
 8000296:	2003      	movs	r0, #3
 8000298:	f7ff ffd0 	bl	800023c <OS_SVC_Set>
 800029c:	4603      	mov	r3, r0
 800029e:	461a      	mov	r2, r3
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <main+0x64>)
 80002a2:	601a      	str	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3, 3, 2);	//sub
 80002a4:	2202      	movs	r2, #2
 80002a6:	2103      	movs	r1, #3
 80002a8:	2003      	movs	r0, #3
 80002aa:	f7ff ffc7 	bl	800023c <OS_SVC_Set>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0x64>)
 80002b4:	601a      	str	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3, 3, 3);	//mult
 80002b6:	2203      	movs	r2, #3
 80002b8:	2103      	movs	r1, #3
 80002ba:	2003      	movs	r0, #3
 80002bc:	f7ff ffbe 	bl	800023c <OS_SVC_Set>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <main+0x64>)
 80002c6:	601a      	str	r2, [r3, #0]

	IRQ_Flag = OS_SVC_Set(0, 0, 4);	//PendSV
 80002c8:	2204      	movs	r2, #4
 80002ca:	2100      	movs	r1, #0
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ffb5 	bl	800023c <OS_SVC_Set>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <main+0x64>)
 80002d8:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <main+0x64>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0fb      	beq.n	80002da <main+0x52>
		{
			IRQ_Flag =0;
 80002e2:	4b02      	ldr	r3, [pc, #8]	; (80002ec <main+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80002e8:	e7f7      	b.n	80002da <main+0x52>
 80002ea:	bf00      	nop
 80002ec:	20000020 	.word	0x20000020

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f921 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ffb1 	bl	8000288 <main>

08000326 <LoopForever>:

LoopForever:
    b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	20000074 	.word	0x20000074

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <EXTI0_IRQHandler>:
/***********************************************************************************************************
 *                                          ISR Functions		                                           *
 ***********************************************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI0_IRQHandler+0x1c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI0_IRQHandler+0x1c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <EXTI0_IRQHandler+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4798      	blx	r3
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	20000038 	.word	0x20000038

08000368 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI1_IRQHandler+0x1c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI1_IRQHandler+0x1c>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <EXTI1_IRQHandler+0x20>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4798      	blx	r3
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010400 	.word	0x40010400
 8000388:	20000038 	.word	0x20000038

0800038c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI2_IRQHandler+0x1c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI2_IRQHandler+0x1c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI2_IRQHandler+0x20>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000038 	.word	0x20000038

080003b0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI3_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI3_IRQHandler+0x1c>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI3_IRQHandler+0x20>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4798      	blx	r3
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000038 	.word	0x20000038

080003d4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI4_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI4_IRQHandler+0x1c>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI4_IRQHandler+0x20>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	20000038 	.word	0x20000038

080003f8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	2b00      	cmp	r3, #0
 8000406:	d008      	beq.n	800041a <EXTI9_5_IRQHandler+0x22>
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a22      	ldr	r2, [pc, #136]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6153      	str	r3, [r2, #20]
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <EXTI9_5_IRQHandler+0xa4>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000422:	2b00      	cmp	r3, #0
 8000424:	d008      	beq.n	8000438 <EXTI9_5_IRQHandler+0x40>
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <EXTI9_5_IRQHandler+0xa4>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000440:	2b00      	cmp	r3, #0
 8000442:	d008      	beq.n	8000456 <EXTI9_5_IRQHandler+0x5e>
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 800044a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044e:	6153      	str	r3, [r2, #20]
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <EXTI9_5_IRQHandler+0xa4>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800045e:	2b00      	cmp	r3, #0
 8000460:	d008      	beq.n	8000474 <EXTI9_5_IRQHandler+0x7c>
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <EXTI9_5_IRQHandler+0xa4>)
 8000470:	6a1b      	ldr	r3, [r3, #32]
 8000472:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800047c:	2b00      	cmp	r3, #0
 800047e:	d008      	beq.n	8000492 <EXTI9_5_IRQHandler+0x9a>
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <EXTI9_5_IRQHandler+0xa0>)
 8000486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800048a:	6153      	str	r3, [r2, #20]
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <EXTI9_5_IRQHandler+0xa4>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010400 	.word	0x40010400
 800049c:	20000038 	.word	0x20000038

080004a0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI15_10_IRQHandler+0x22>
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a29      	ldr	r2, [pc, #164]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b28      	ldr	r3, [pc, #160]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 80004be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c0:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 80004c2:	4b26      	ldr	r3, [pc, #152]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI15_10_IRQHandler+0x40>
 80004ce:	4b23      	ldr	r3, [pc, #140]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a22      	ldr	r2, [pc, #136]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI15_10_IRQHandler+0x5e>
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 80004f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <EXTI15_10_IRQHandler+0x7c>
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a13      	ldr	r2, [pc, #76]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 8000510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 8000518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d008      	beq.n	800053a <EXTI15_10_IRQHandler+0x9a>
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000532:	6153      	str	r3, [r2, #20]
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 8000536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000538:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <EXTI15_10_IRQHandler+0xb8>
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI15_10_IRQHandler+0xbc>)
 800054c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI15_10_IRQHandler+0xc0>)
 8000554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000556:	4798      	blx	r3
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40010400 	.word	0x40010400
 8000560:	20000038 	.word	0x20000038

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2500      	movs	r5, #0
 8000568:	4e0c      	ldr	r6, [pc, #48]	; (800059c <__libc_init_array+0x38>)
 800056a:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056c:	1ba4      	subs	r4, r4, r6
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	42a5      	cmp	r5, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	f000 f81a 	bl	80005ac <_init>
 8000578:	2500      	movs	r5, #0
 800057a:	4e0a      	ldr	r6, [pc, #40]	; (80005a4 <__libc_init_array+0x40>)
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <__libc_init_array+0x44>)
 800057e:	1ba4      	subs	r4, r4, r6
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	42a5      	cmp	r5, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800058c:	4798      	blx	r3
 800058e:	3501      	adds	r5, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000596:	4798      	blx	r3
 8000598:	3501      	adds	r5, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
