
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c20  08000c20  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c48  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c48  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003064  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007c5  00000000  00000000  000230ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000720  00000000  00000000  00023872  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000148  00000000  00000000  00023f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  000240e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f14  00000000  00000000  000241e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b2b  00000000  00000000  000260f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007a0f  00000000  00000000  00027c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f62e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003c8  00000000  00000000  0002f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bdc 	.word	0x08000bdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bdc 	.word	0x08000bdc

08000170 <clock_init>:
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN() ;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	/* Enable Clock for GPIOB */
	RCC_GPIOB_CLK_EN() ;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc34 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc28 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc1c 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc10 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fc04 	bl	8000a1e <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fbf8 	bl	8000a1e <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fbec 	bl	8000a1e <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <wait_ms>:

void wait_ms(uint32_t time) {
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e00b      	b.n	800027a <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <wait_ms+0x1a>
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2bfe      	cmp	r3, #254	; 0xfe
 8000272:	d9f9      	bls.n	8000268 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3ef      	bcc.n	8000262 <wait_ms+0xe>
			;
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <main>:

int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0

	clock_init();
 8000292:	f7ff ff6d 	bl	8000170 <clock_init>
	LCD_init();
 8000296:	f000 fa03 	bl	80006a0 <LCD_init>
	unsigned char key_pressed;
	LCD_write_string("HEY");
 800029a:	482e      	ldr	r0, [pc, #184]	; (8000354 <main+0xc8>)
 800029c:	f000 fb30 	bl	8000900 <LCD_write_string>
	wait_ms(30);
 80002a0:	201e      	movs	r0, #30
 80002a2:	f7ff ffd7 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 80002a6:	f000 fb01 	bl	80008ac <LCD_clear_screen>
	GPIO_init();
 80002aa:	f7ff ff75 	bl	8000198 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <main+0xcc>)
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b6:	c303      	stmia	r3!, {r0, r1}
 80002b8:	801a      	strh	r2, [r3, #0]
 80002ba:	3302      	adds	r3, #2
 80002bc:	0c12      	lsrs	r2, r2, #16
 80002be:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002c0:	4a26      	ldr	r2, [pc, #152]	; (800035c <main+0xd0>)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c6:	c303      	stmia	r3!, {r0, r1}
 80002c8:	801a      	strh	r2, [r3, #0]
 80002ca:	3302      	adds	r3, #2
 80002cc:	0c12      	lsrs	r2, r2, #16
 80002ce:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 80002d0:	2300      	movs	r3, #0
 80002d2:	77fb      	strb	r3, [r7, #31]
 80002d4:	e01b      	b.n	800030e <main+0x82>
		LCD_write_char(LCD_DISPLAY[i]);
 80002d6:	7ffb      	ldrb	r3, [r7, #31]
 80002d8:	f107 0220 	add.w	r2, r7, #32
 80002dc:	4413      	add	r3, r2
 80002de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 faea 	bl	80008bc <LCD_write_char>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 80002e8:	7ffb      	ldrb	r3, [r7, #31]
 80002ea:	f107 0220 	add.w	r2, r7, #32
 80002ee:	4413      	add	r3, r2
 80002f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	025b      	lsls	r3, r3, #9
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0xd4>)
 80002fe:	f000 fc3b 	bl	8000b78 <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f7ff ffa6 	bl	8000254 <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000308:	7ffb      	ldrb	r3, [r7, #31]
 800030a:	3301      	adds	r3, #1
 800030c:	77fb      	strb	r3, [r7, #31]
 800030e:	7ffb      	ldrb	r3, [r7, #31]
 8000310:	2b0a      	cmp	r3, #10
 8000312:	d9e0      	bls.n	80002d6 <main+0x4a>
	}
	LCD_clear_screen();
 8000314:	f000 faca 	bl	80008ac <LCD_clear_screen>
	KEYPAD_init();
 8000318:	f000 f850 	bl	80003bc <KEYPAD_init>
	LCD_write_string("Keypad is ready");
 800031c:	4811      	ldr	r0, [pc, #68]	; (8000364 <main+0xd8>)
 800031e:	f000 faef 	bl	8000900 <LCD_write_string>
	wait_ms(30);
 8000322:	201e      	movs	r0, #30
 8000324:	f7ff ff96 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 8000328:	f000 fac0 	bl	80008ac <LCD_clear_screen>

	while (1) {
		key_pressed = KEYPAD_get_char();
 800032c:	f000 f8bc 	bl	80004a8 <KEYPAD_get_char>
 8000330:	4603      	mov	r3, r0
 8000332:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000334:	7fbb      	ldrb	r3, [r7, #30]
 8000336:	2b21      	cmp	r3, #33	; 0x21
 8000338:	d002      	beq.n	8000340 <main+0xb4>
 800033a:	2b4e      	cmp	r3, #78	; 0x4e
 800033c:	d008      	beq.n	8000350 <main+0xc4>
 800033e:	e002      	b.n	8000346 <main+0xba>
		case 'N':
			break;
		case '!':
			LCD_clear_screen();
 8000340:	f000 fab4 	bl	80008ac <LCD_clear_screen>
			break;
 8000344:	e005      	b.n	8000352 <main+0xc6>
		default:
			LCD_write_char(key_pressed);
 8000346:	7fbb      	ldrb	r3, [r7, #30]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fab7 	bl	80008bc <LCD_write_char>
			break;
 800034e:	e000      	b.n	8000352 <main+0xc6>
			break;
 8000350:	bf00      	nop
		key_pressed = KEYPAD_get_char();
 8000352:	e7eb      	b.n	800032c <main+0xa0>
 8000354:	08000bf4 	.word	0x08000bf4
 8000358:	08000c08 	.word	0x08000c08
 800035c:	08000c14 	.word	0x08000c14
 8000360:	40010c00 	.word	0x40010c00
 8000364:	08000bf8 	.word	0x08000bf8

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 fbfd 	bl	8000b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff77 	bl	800028c <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003ac:	08000c28 	.word	0x08000c28
  ldr r2, =_sbss
 80003b0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003b4:	20000040 	.word	0x20000040

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <KEYPAD_init>:

/*********************************************************
 *                   Function Definitions                *
 ********************************************************/
void KEYPAD_init()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	//set Column as output
	PinCfg.GPIO_PinNumber = R0 ;
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <KEYPAD_init+0xe4>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <KEYPAD_init+0xe4>)
 80003c8:	2204      	movs	r2, #4
 80003ca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <KEYPAD_init+0xe4>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 80003d2:	4933      	ldr	r1, [pc, #204]	; (80004a0 <KEYPAD_init+0xe4>)
 80003d4:	4833      	ldr	r0, [pc, #204]	; (80004a4 <KEYPAD_init+0xe8>)
 80003d6:	f000 fb22 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1 ;
 80003da:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <KEYPAD_init+0xe4>)
 80003dc:	2202      	movs	r2, #2
 80003de:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80003e0:	4b2f      	ldr	r3, [pc, #188]	; (80004a0 <KEYPAD_init+0xe4>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <KEYPAD_init+0xe4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 80003ec:	492c      	ldr	r1, [pc, #176]	; (80004a0 <KEYPAD_init+0xe4>)
 80003ee:	482d      	ldr	r0, [pc, #180]	; (80004a4 <KEYPAD_init+0xe8>)
 80003f0:	f000 fb15 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2 ;
 80003f4:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <KEYPAD_init+0xe4>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <KEYPAD_init+0xe4>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000400:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <KEYPAD_init+0xe4>)
 8000402:	2201      	movs	r2, #1
 8000404:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 8000406:	4926      	ldr	r1, [pc, #152]	; (80004a0 <KEYPAD_init+0xe4>)
 8000408:	4826      	ldr	r0, [pc, #152]	; (80004a4 <KEYPAD_init+0xe8>)
 800040a:	f000 fb08 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3 ;
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <KEYPAD_init+0xe4>)
 8000410:	2210      	movs	r2, #16
 8000412:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000414:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <KEYPAD_init+0xe4>)
 8000416:	2204      	movs	r2, #4
 8000418:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <KEYPAD_init+0xe4>)
 800041c:	2201      	movs	r2, #1
 800041e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 8000420:	491f      	ldr	r1, [pc, #124]	; (80004a0 <KEYPAD_init+0xe4>)
 8000422:	4820      	ldr	r0, [pc, #128]	; (80004a4 <KEYPAD_init+0xe8>)
 8000424:	f000 fafb 	bl	8000a1e <MCAL_GPIO_Init>

	//set Rows as input
	PinCfg.GPIO_PinNumber = C0 ;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <KEYPAD_init+0xe4>)
 800042a:	2220      	movs	r2, #32
 800042c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <KEYPAD_init+0xe4>)
 8000430:	2204      	movs	r2, #4
 8000432:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <KEYPAD_init+0xe4>)
 8000436:	2201      	movs	r2, #1
 8000438:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 800043a:	4919      	ldr	r1, [pc, #100]	; (80004a0 <KEYPAD_init+0xe4>)
 800043c:	4819      	ldr	r0, [pc, #100]	; (80004a4 <KEYPAD_init+0xe8>)
 800043e:	f000 faee 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1 ;
 8000442:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <KEYPAD_init+0xe4>)
 8000444:	2240      	movs	r2, #64	; 0x40
 8000446:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <KEYPAD_init+0xe4>)
 800044a:	2204      	movs	r2, #4
 800044c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <KEYPAD_init+0xe4>)
 8000450:	2201      	movs	r2, #1
 8000452:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 8000454:	4912      	ldr	r1, [pc, #72]	; (80004a0 <KEYPAD_init+0xe4>)
 8000456:	4813      	ldr	r0, [pc, #76]	; (80004a4 <KEYPAD_init+0xe8>)
 8000458:	f000 fae1 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2 ;
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <KEYPAD_init+0xe4>)
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <KEYPAD_init+0xe4>)
 8000464:	2204      	movs	r2, #4
 8000466:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <KEYPAD_init+0xe4>)
 800046a:	2201      	movs	r2, #1
 800046c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 800046e:	490c      	ldr	r1, [pc, #48]	; (80004a0 <KEYPAD_init+0xe4>)
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <KEYPAD_init+0xe8>)
 8000472:	f000 fad4 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3 ;
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <KEYPAD_init+0xe4>)
 8000478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800047c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <KEYPAD_init+0xe4>)
 8000480:	2204      	movs	r2, #4
 8000482:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <KEYPAD_init+0xe4>)
 8000486:	2201      	movs	r2, #1
 8000488:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT_ID, &PinCfg);
 800048a:	4905      	ldr	r1, [pc, #20]	; (80004a0 <KEYPAD_init+0xe4>)
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <KEYPAD_init+0xe8>)
 800048e:	f000 fac6 	bl	8000a1e <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT_ID, 0xFF);
 8000492:	21ff      	movs	r1, #255	; 0xff
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <KEYPAD_init+0xe8>)
 8000496:	f000 fb6f 	bl	8000b78 <MCAL_GPIO_WritePort>
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000003c 	.word	0x2000003c
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <KEYPAD_get_char>:

char KEYPAD_get_char()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0 ; i < 4 ; i++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e0b4      	b.n	800061e <KEYPAD_get_char+0x176>
	{
		//KEYPAD_PORT_ID |= ((1<<keypad_C[0]) | (1<<keypad_C[1]) | (1<<keypad_C[2]) | (1<<keypad_C[3]));
		MCAL_GPIO_WritePin(KEYPAD_PORT_ID, keypad_C[0], GPIO_PIN_SET);
 80004b4:	4b5e      	ldr	r3, [pc, #376]	; (8000630 <KEYPAD_get_char+0x188>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	485d      	ldr	r0, [pc, #372]	; (8000634 <KEYPAD_get_char+0x18c>)
 80004c0:	f000 fb43 	bl	8000b4a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT_ID, keypad_C[1], GPIO_PIN_SET);
 80004c4:	4b5a      	ldr	r3, [pc, #360]	; (8000630 <KEYPAD_get_char+0x188>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	4859      	ldr	r0, [pc, #356]	; (8000634 <KEYPAD_get_char+0x18c>)
 80004d0:	f000 fb3b 	bl	8000b4a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT_ID, keypad_C[2], GPIO_PIN_SET);
 80004d4:	4b56      	ldr	r3, [pc, #344]	; (8000630 <KEYPAD_get_char+0x188>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	b29b      	uxth	r3, r3
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	4855      	ldr	r0, [pc, #340]	; (8000634 <KEYPAD_get_char+0x18c>)
 80004e0:	f000 fb33 	bl	8000b4a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT_ID, keypad_C[3], GPIO_PIN_SET);
 80004e4:	4b52      	ldr	r3, [pc, #328]	; (8000630 <KEYPAD_get_char+0x188>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	4851      	ldr	r0, [pc, #324]	; (8000634 <KEYPAD_get_char+0x18c>)
 80004f0:	f000 fb2b 	bl	8000b4a <MCAL_GPIO_WritePin>

		//KEYPAD_PORT_ID &= ~(1<<keypad_C[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT_ID, keypad_C[i], GPIO_PIN_RESET);
 80004f4:	4a4e      	ldr	r2, [pc, #312]	; (8000630 <KEYPAD_get_char+0x188>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	484c      	ldr	r0, [pc, #304]	; (8000634 <KEYPAD_get_char+0x18c>)
 8000504:	f000 fb21 	bl	8000b4a <MCAL_GPIO_WritePin>

		for(j = 0 ; j < 4 ; j++)
 8000508:	2300      	movs	r3, #0
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	e080      	b.n	8000610 <KEYPAD_get_char+0x168>
		{
			if(!(MCAL_GPIO_ReadPin(KEYPAD_PORT_ID,keypad_R[j])))
 800050e:	4a4a      	ldr	r2, [pc, #296]	; (8000638 <KEYPAD_get_char+0x190>)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	4846      	ldr	r0, [pc, #280]	; (8000634 <KEYPAD_get_char+0x18c>)
 800051c:	f000 fafe 	bl	8000b1c <MCAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d171      	bne.n	800060a <KEYPAD_get_char+0x162>
			{
				while(!(MCAL_GPIO_ReadPin(KEYPAD_PORT_ID,keypad_R[j])));
 8000526:	bf00      	nop
 8000528:	4a43      	ldr	r2, [pc, #268]	; (8000638 <KEYPAD_get_char+0x190>)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000530:	b29b      	uxth	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	483f      	ldr	r0, [pc, #252]	; (8000634 <KEYPAD_get_char+0x18c>)
 8000536:	f000 faf1 	bl	8000b1c <MCAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0f3      	beq.n	8000528 <KEYPAD_get_char+0x80>
				switch(i)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d861      	bhi.n	800060a <KEYPAD_get_char+0x162>
 8000546:	a201      	add	r2, pc, #4	; (adr r2, 800054c <KEYPAD_get_char+0xa4>)
 8000548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054c:	0800055d 	.word	0x0800055d
 8000550:	08000585 	.word	0x08000585
 8000554:	080005ad 	.word	0x080005ad
 8000558:	080005d5 	.word	0x080005d5
				{
				case 0:
					if(j==0)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <KEYPAD_get_char+0xbe>
						return '7';
 8000562:	2337      	movs	r3, #55	; 0x37
 8000564:	e060      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==1)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d101      	bne.n	8000570 <KEYPAD_get_char+0xc8>
						return '4';
 800056c:	2334      	movs	r3, #52	; 0x34
 800056e:	e05b      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==2)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d101      	bne.n	800057a <KEYPAD_get_char+0xd2>
						return '1';
 8000576:	2331      	movs	r3, #49	; 0x31
 8000578:	e056      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==3)
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d13d      	bne.n	80005fc <KEYPAD_get_char+0x154>
						return '!';
 8000580:	2321      	movs	r3, #33	; 0x21
 8000582:	e051      	b.n	8000628 <KEYPAD_get_char+0x180>
					break;
				case 1:
					if(j==0)
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d101      	bne.n	800058e <KEYPAD_get_char+0xe6>
						return '8';
 800058a:	2338      	movs	r3, #56	; 0x38
 800058c:	e04c      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==1)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d101      	bne.n	8000598 <KEYPAD_get_char+0xf0>
						return '5';
 8000594:	2335      	movs	r3, #53	; 0x35
 8000596:	e047      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==2)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d101      	bne.n	80005a2 <KEYPAD_get_char+0xfa>
						return '2';
 800059e:	2332      	movs	r3, #50	; 0x32
 80005a0:	e042      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==3)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d12b      	bne.n	8000600 <KEYPAD_get_char+0x158>
						return '0';
 80005a8:	2330      	movs	r3, #48	; 0x30
 80005aa:	e03d      	b.n	8000628 <KEYPAD_get_char+0x180>
					break;
				case 2:
					if(j==0)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <KEYPAD_get_char+0x10e>
						return '9';
 80005b2:	2339      	movs	r3, #57	; 0x39
 80005b4:	e038      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==1)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d101      	bne.n	80005c0 <KEYPAD_get_char+0x118>
						return '6';
 80005bc:	2336      	movs	r3, #54	; 0x36
 80005be:	e033      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==2)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d101      	bne.n	80005ca <KEYPAD_get_char+0x122>
						return '3';
 80005c6:	2333      	movs	r3, #51	; 0x33
 80005c8:	e02e      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==3)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d119      	bne.n	8000604 <KEYPAD_get_char+0x15c>
						return '=';
 80005d0:	233d      	movs	r3, #61	; 0x3d
 80005d2:	e029      	b.n	8000628 <KEYPAD_get_char+0x180>
					break;
				case 3:
					if(j==0)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <KEYPAD_get_char+0x136>
						return '/';
 80005da:	232f      	movs	r3, #47	; 0x2f
 80005dc:	e024      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==1)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d101      	bne.n	80005e8 <KEYPAD_get_char+0x140>
						return '*';
 80005e4:	232a      	movs	r3, #42	; 0x2a
 80005e6:	e01f      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==2)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d101      	bne.n	80005f2 <KEYPAD_get_char+0x14a>
						return '-';
 80005ee:	232d      	movs	r3, #45	; 0x2d
 80005f0:	e01a      	b.n	8000628 <KEYPAD_get_char+0x180>
					else if(j==3)
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d107      	bne.n	8000608 <KEYPAD_get_char+0x160>
						return '+';
 80005f8:	232b      	movs	r3, #43	; 0x2b
 80005fa:	e015      	b.n	8000628 <KEYPAD_get_char+0x180>
					break;
 80005fc:	bf00      	nop
 80005fe:	e004      	b.n	800060a <KEYPAD_get_char+0x162>
					break;
 8000600:	bf00      	nop
 8000602:	e002      	b.n	800060a <KEYPAD_get_char+0x162>
					break;
 8000604:	bf00      	nop
 8000606:	e000      	b.n	800060a <KEYPAD_get_char+0x162>
					break;
 8000608:	bf00      	nop
		for(j = 0 ; j < 4 ; j++)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2b03      	cmp	r3, #3
 8000614:	f77f af7b 	ble.w	800050e <KEYPAD_get_char+0x66>
	for (i = 0 ; i < 4 ; i++)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b03      	cmp	r3, #3
 8000622:	f77f af47 	ble.w	80004b4 <KEYPAD_get_char+0xc>
				}
			}
		}
	}
	return 'N';		//NULL
 8000626:	234e      	movs	r3, #78	; 0x4e
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000010 	.word	0x20000010
 8000634:	40010c00 	.word	0x40010c00
 8000638:	20000000 	.word	0x20000000

0800063c <my_wait>:

GPIO_PinConfig_t PinCfg ;

//Delay
void my_wait(int x)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for(i=0 ; i<x ;i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e00b      	b.n	8000662 <my_wait+0x26>
	{
		for(j=0;j<255;j++);
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	e002      	b.n	8000656 <my_wait+0x1a>
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2bfe      	cmp	r3, #254	; 0xfe
 800065a:	d9f9      	bls.n	8000650 <my_wait+0x14>
	for(i=0 ; i<x ;i++)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3ef      	bcc.n	800064a <my_wait+0xe>
	}
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <LCD_start>:

void LCD_start()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <LCD_start+0x28>)
 8000680:	f000 fa63 	bl	8000b4a <MCAL_GPIO_WritePin>
	my_wait(50);
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f7ff ffd9 	bl	800063c <my_wait>
	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <LCD_start+0x28>)
 8000692:	f000 fa5a 	bl	8000b4a <MCAL_GPIO_WritePin>

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010800 	.word	0x40010800

080006a0 <LCD_init>:
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
}


void LCD_init()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	my_wait(20);
 80006a4:	2014      	movs	r0, #20
 80006a6:	f7ff ffc9 	bl	800063c <my_wait>

	//ENABLE_SWITCH ,RS, RW output with speed 10Mhz
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80006aa:	4b59      	ldr	r3, [pc, #356]	; (8000810 <LCD_init+0x170>)
 80006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006b2:	4b57      	ldr	r3, [pc, #348]	; (8000810 <LCD_init+0x170>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006b8:	4b55      	ldr	r3, [pc, #340]	; (8000810 <LCD_init+0x170>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80006be:	4954      	ldr	r1, [pc, #336]	; (8000810 <LCD_init+0x170>)
 80006c0:	4854      	ldr	r0, [pc, #336]	; (8000814 <LCD_init+0x174>)
 80006c2:	f000 f9ac 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80006c6:	4b52      	ldr	r3, [pc, #328]	; (8000810 <LCD_init+0x170>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <LCD_init+0x170>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006d4:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <LCD_init+0x170>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80006da:	494d      	ldr	r1, [pc, #308]	; (8000810 <LCD_init+0x170>)
 80006dc:	484d      	ldr	r0, [pc, #308]	; (8000814 <LCD_init+0x174>)
 80006de:	f000 f99e 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 80006e2:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <LCD_init+0x170>)
 80006e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006ea:	4b49      	ldr	r3, [pc, #292]	; (8000810 <LCD_init+0x170>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006f0:	4b47      	ldr	r3, [pc, #284]	; (8000810 <LCD_init+0x170>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80006f6:	4946      	ldr	r1, [pc, #280]	; (8000810 <LCD_init+0x170>)
 80006f8:	4846      	ldr	r0, [pc, #280]	; (8000814 <LCD_init+0x174>)
 80006fa:	f000 f990 	bl	8000a1e <MCAL_GPIO_Init>

	//All Data Pins output with speed 10Mhz
	PinCfg.GPIO_PinNumber = GPIO_PIN_0 ;
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <LCD_init+0x170>)
 8000700:	2201      	movs	r2, #1
 8000702:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <LCD_init+0x170>)
 8000706:	2204      	movs	r2, #4
 8000708:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <LCD_init+0x170>)
 800070c:	2201      	movs	r2, #1
 800070e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000710:	493f      	ldr	r1, [pc, #252]	; (8000810 <LCD_init+0x170>)
 8000712:	4840      	ldr	r0, [pc, #256]	; (8000814 <LCD_init+0x174>)
 8000714:	f000 f983 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1 ;
 8000718:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <LCD_init+0x170>)
 800071a:	2202      	movs	r2, #2
 800071c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <LCD_init+0x170>)
 8000720:	2204      	movs	r2, #4
 8000722:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <LCD_init+0x170>)
 8000726:	2201      	movs	r2, #1
 8000728:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 800072a:	4939      	ldr	r1, [pc, #228]	; (8000810 <LCD_init+0x170>)
 800072c:	4839      	ldr	r0, [pc, #228]	; (8000814 <LCD_init+0x174>)
 800072e:	f000 f976 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <LCD_init+0x170>)
 8000734:	2204      	movs	r2, #4
 8000736:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <LCD_init+0x170>)
 800073a:	2204      	movs	r2, #4
 800073c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <LCD_init+0x170>)
 8000740:	2201      	movs	r2, #1
 8000742:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000744:	4932      	ldr	r1, [pc, #200]	; (8000810 <LCD_init+0x170>)
 8000746:	4833      	ldr	r0, [pc, #204]	; (8000814 <LCD_init+0x174>)
 8000748:	f000 f969 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <LCD_init+0x170>)
 800074e:	2208      	movs	r2, #8
 8000750:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <LCD_init+0x170>)
 8000754:	2204      	movs	r2, #4
 8000756:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <LCD_init+0x170>)
 800075a:	2201      	movs	r2, #1
 800075c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 800075e:	492c      	ldr	r1, [pc, #176]	; (8000810 <LCD_init+0x170>)
 8000760:	482c      	ldr	r0, [pc, #176]	; (8000814 <LCD_init+0x174>)
 8000762:	f000 f95c 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <LCD_init+0x170>)
 8000768:	2210      	movs	r2, #16
 800076a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <LCD_init+0x170>)
 800076e:	2204      	movs	r2, #4
 8000770:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <LCD_init+0x170>)
 8000774:	2201      	movs	r2, #1
 8000776:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000778:	4925      	ldr	r1, [pc, #148]	; (8000810 <LCD_init+0x170>)
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <LCD_init+0x174>)
 800077c:	f000 f94f 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <LCD_init+0x170>)
 8000782:	2220      	movs	r2, #32
 8000784:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <LCD_init+0x170>)
 8000788:	2204      	movs	r2, #4
 800078a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <LCD_init+0x170>)
 800078e:	2201      	movs	r2, #1
 8000790:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000792:	491f      	ldr	r1, [pc, #124]	; (8000810 <LCD_init+0x170>)
 8000794:	481f      	ldr	r0, [pc, #124]	; (8000814 <LCD_init+0x174>)
 8000796:	f000 f942 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <LCD_init+0x170>)
 800079c:	2240      	movs	r2, #64	; 0x40
 800079e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <LCD_init+0x170>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <LCD_init+0x170>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80007ac:	4918      	ldr	r1, [pc, #96]	; (8000810 <LCD_init+0x170>)
 80007ae:	4819      	ldr	r0, [pc, #100]	; (8000814 <LCD_init+0x174>)
 80007b0:	f000 f935 	bl	8000a1e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <LCD_init+0x170>)
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <LCD_init+0x170>)
 80007bc:	2204      	movs	r2, #4
 80007be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <LCD_init+0x170>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80007c6:	4912      	ldr	r1, [pc, #72]	; (8000810 <LCD_init+0x170>)
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <LCD_init+0x174>)
 80007ca:	f000 f928 	bl	8000a1e <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <LCD_init+0x174>)
 80007d6:	f000 f9b8 	bl	8000b4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LCD_init+0x174>)
 80007e2:	f000 f9b2 	bl	8000b4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <LCD_init+0x174>)
 80007ee:	f000 f9ac 	bl	8000b4a <MCAL_GPIO_WritePin>

	my_wait(15);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f7ff ff22 	bl	800063c <my_wait>
	LCD_PORTID &= ~(1<<ENABLE_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH);
	LCD_PORT_DATA_DIR = 0xFF;
	LCD_clear_screen();
	LCD_write_command(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_write_command(LCD_ENTRY_MODE);
 80007f8:	2006      	movs	r0, #6
 80007fa:	f000 f837 	bl	800086c <LCD_write_command>
	LCD_write_command(LCD_SET_CURSOR_LOCATION);
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	f000 f834 	bl	800086c <LCD_write_command>
	LCD_write_command(LCD_CURSOR_ON);
 8000804:	200e      	movs	r0, #14
 8000806:	f000 f831 	bl	800086c <LCD_write_command>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000003c 	.word	0x2000003c
 8000814:	40010800 	.word	0x40010800

08000818 <LCD_goto_XY>:

void LCD_goto_XY(int line,int position)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	if(line == 1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10d      	bne.n	8000844 <LCD_goto_XY+0x2c>
	{
		if(position < 16 && position >= 0)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b0f      	cmp	r3, #15
 800082c:	dc1a      	bgt.n	8000864 <LCD_goto_XY+0x4c>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db17      	blt.n	8000864 <LCD_goto_XY+0x4c>
		{
			LCD_write_command(LCD_SET_CURSOR_LOCATION+position);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3b80      	subs	r3, #128	; 0x80
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f815 	bl	800086c <LCD_write_command>
		if(position < 32 && position >= 0)
		{
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 8000842:	e00f      	b.n	8000864 <LCD_goto_XY+0x4c>
	else if(line == 2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d10c      	bne.n	8000864 <LCD_goto_XY+0x4c>
		if(position < 32 && position >= 0)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc09      	bgt.n	8000864 <LCD_goto_XY+0x4c>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db06      	blt.n	8000864 <LCD_goto_XY+0x4c>
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW+position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3b40      	subs	r3, #64	; 0x40
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f804 	bl	800086c <LCD_write_command>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <LCD_write_command>:

void LCD_write_command(unsigned char command)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();		//check if it is busy or not
	MCAL_GPIO_WritePort(LCD_PORTID, command);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	b29b      	uxth	r3, r3
 800087a:	4619      	mov	r1, r3
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <LCD_write_command+0x3c>)
 800087e:	f000 f97b 	bl	8000b78 <MCAL_GPIO_WritePort>
	//command mode
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <LCD_write_command+0x3c>)
 800088a:	f000 f95e 	bl	8000b4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <LCD_write_command+0x3c>)
 8000896:	f000 f958 	bl	8000b4a <MCAL_GPIO_WritePin>
	LCD_start();
 800089a:	f7ff feeb 	bl	8000674 <LCD_start>
	//	LCD_start();
	//	LCD_PORTID = (LCD_PORTID & 0x0F) | (command << DATA_SHIFT);
	//	LCD_PORTID &= ~(1<<RW_SWITCH) | (1<<RS_SWITCH); 	//command mode
	//	LCD_start();
	//#endif
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010800 	.word	0x40010800

080008ac <LCD_clear_screen>:

void LCD_clear_screen()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	LCD_write_command(LCD_CLEAR_COMMAND);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ffdb 	bl	800086c <LCD_write_command>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <LCD_write_char>:

void LCD_write_char(unsigned char data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();		//check if it is busy or not
	MCAL_GPIO_WritePort(LCD_PORTID, data);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <LCD_write_char+0x40>)
 80008ce:	f000 f953 	bl	8000b78 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <LCD_write_char+0x40>)
 80008da:	f000 f936 	bl	8000b4a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <LCD_write_char+0x40>)
 80008e6:	f000 f930 	bl	8000b4a <MCAL_GPIO_WritePin>
	my_wait(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fea6 	bl	800063c <my_wait>
	LCD_start();
 80008f0:	f7ff fec0 	bl	8000674 <LCD_start>
	LCD_PORTID = (LCD_PORTID & 0x0F) | (data << DATA_SHIFT);
	LCD_PORTID &= ~(1<<RW_SWITCH);
	LCD_PORTID |= (1<<RS_SWITCH);		//data mode
	LCD_start();
#endif
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010800 	.word	0x40010800

08000900 <LCD_write_string>:

void LCD_write_string(char* data)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	int counter = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 800090c:	e01c      	b.n	8000948 <LCD_write_string+0x48>
	{
		counter++;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
		LCD_write_char(*data++);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffcd 	bl	80008bc <LCD_write_char>
		if(counter == 16)	//reached end of the line
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b10      	cmp	r3, #16
 8000926:	d104      	bne.n	8000932 <LCD_write_string+0x32>
		{
			LCD_goto_XY(2,0);
 8000928:	2100      	movs	r1, #0
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff ff74 	bl	8000818 <LCD_goto_XY>
 8000930:	e00a      	b.n	8000948 <LCD_write_string+0x48>
		}
		else if(counter == 32)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b20      	cmp	r3, #32
 8000936:	d107      	bne.n	8000948 <LCD_write_string+0x48>
		{
			LCD_clear_screen();
 8000938:	f7ff ffb8 	bl	80008ac <LCD_clear_screen>
			LCD_goto_XY(1, 0);
 800093c:	2100      	movs	r1, #0
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff ff6a 	bl	8000818 <LCD_goto_XY>
			counter =0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1de      	bne.n	800090e <LCD_write_string+0xe>
		}
	}
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <Get_CRLH_Position>:



//Function used to get the position
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	2b80      	cmp	r3, #128	; 0x80
 8000966:	d042      	beq.n	80009ee <Get_CRLH_Position+0x96>
 8000968:	2b80      	cmp	r3, #128	; 0x80
 800096a:	dc11      	bgt.n	8000990 <Get_CRLH_Position+0x38>
 800096c:	2b08      	cmp	r3, #8
 800096e:	d036      	beq.n	80009de <Get_CRLH_Position+0x86>
 8000970:	2b08      	cmp	r3, #8
 8000972:	dc06      	bgt.n	8000982 <Get_CRLH_Position+0x2a>
 8000974:	2b02      	cmp	r3, #2
 8000976:	d02e      	beq.n	80009d6 <Get_CRLH_Position+0x7e>
 8000978:	2b04      	cmp	r3, #4
 800097a:	d02e      	beq.n	80009da <Get_CRLH_Position+0x82>
 800097c:	2b01      	cmp	r3, #1
 800097e:	d028      	beq.n	80009d2 <Get_CRLH_Position+0x7a>
 8000980:	e047      	b.n	8000a12 <Get_CRLH_Position+0xba>
 8000982:	2b20      	cmp	r3, #32
 8000984:	d02f      	beq.n	80009e6 <Get_CRLH_Position+0x8e>
 8000986:	2b40      	cmp	r3, #64	; 0x40
 8000988:	d02f      	beq.n	80009ea <Get_CRLH_Position+0x92>
 800098a:	2b10      	cmp	r3, #16
 800098c:	d029      	beq.n	80009e2 <Get_CRLH_Position+0x8a>
 800098e:	e040      	b.n	8000a12 <Get_CRLH_Position+0xba>
 8000990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000994:	d033      	beq.n	80009fe <Get_CRLH_Position+0xa6>
 8000996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800099a:	dc09      	bgt.n	80009b0 <Get_CRLH_Position+0x58>
 800099c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009a0:	d029      	beq.n	80009f6 <Get_CRLH_Position+0x9e>
 80009a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a6:	d028      	beq.n	80009fa <Get_CRLH_Position+0xa2>
 80009a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009ac:	d021      	beq.n	80009f2 <Get_CRLH_Position+0x9a>
 80009ae:	e030      	b.n	8000a12 <Get_CRLH_Position+0xba>
 80009b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b4:	d027      	beq.n	8000a06 <Get_CRLH_Position+0xae>
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ba:	dc03      	bgt.n	80009c4 <Get_CRLH_Position+0x6c>
 80009bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009c0:	d01f      	beq.n	8000a02 <Get_CRLH_Position+0xaa>
 80009c2:	e026      	b.n	8000a12 <Get_CRLH_Position+0xba>
 80009c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009c8:	d01f      	beq.n	8000a0a <Get_CRLH_Position+0xb2>
 80009ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ce:	d01e      	beq.n	8000a0e <Get_CRLH_Position+0xb6>
 80009d0:	e01f      	b.n	8000a12 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e01e      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	e01c      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80009da:	2308      	movs	r3, #8
 80009dc:	e01a      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80009de:	230c      	movs	r3, #12
 80009e0:	e018      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80009e2:	2310      	movs	r3, #16
 80009e4:	e016      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80009e6:	2314      	movs	r3, #20
 80009e8:	e014      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80009ea:	2318      	movs	r3, #24
 80009ec:	e012      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80009ee:	231c      	movs	r3, #28
 80009f0:	e010      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e00e      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	e00c      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80009fa:	2308      	movs	r3, #8
 80009fc:	e00a      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80009fe:	230c      	movs	r3, #12
 8000a00:	e008      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000a02:	2310      	movs	r3, #16
 8000a04:	e006      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000a06:	2314      	movs	r3, #20
 8000a08:	e004      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000a0a:	2318      	movs	r3, #24
 8000a0c:	e002      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000a0e:	231c      	movs	r3, #28
 8000a10:	e000      	b.n	8000a14 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000a1e:	b590      	push	{r4, r7, lr}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) Configures PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) Configures PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL : &GPIOx->CRH ;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d801      	bhi.n	8000a3c <MCAL_GPIO_Init+0x1e>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	e001      	b.n	8000a40 <MCAL_GPIO_Init+0x22>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~( 0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber) ) ;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff86 	bl	8000958 <Get_CRLH_Position>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	4093      	lsls	r3, r2
 8000a54:	43da      	mvns	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	789b      	ldrb	r3, [r3, #2]
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d00b      	beq.n	8000a80 <MCAL_GPIO_Init+0x62>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d007      	beq.n	8000a80 <MCAL_GPIO_Init+0x62>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d003      	beq.n	8000a80 <MCAL_GPIO_Init+0x62>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d10e      	bne.n	8000a9e <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	3b04      	subs	r3, #4
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	78db      	ldrb	r3, [r3, #3]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e02c      	b.n	8000af8 <MCAL_GPIO_Init+0xda>

	}
	//if Pin is input
	else	//MODE = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	789b      	ldrb	r3, [r3, #2]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d003      	beq.n	8000aae <MCAL_GPIO_Init+0x90>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE ) << 2) | 0x0) & 0x0F ) ;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	789b      	ldrb	r3, [r3, #2]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e01c      	b.n	8000af8 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)		//Consider it as input floating
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	789b      	ldrb	r3, [r3, #2]
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d102      	bne.n	8000acc <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLOAT ) << 2) | 0x0) & 0x0F ) ;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e015      	b.n	8000af8 <MCAL_GPIO_Init+0xda>
		}
		else	//PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0F ) ;
 8000acc:	2308      	movs	r3, #8
 8000ace:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d107      	bne.n	8000ae8 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	8812      	ldrh	r2, [r2, #0]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	e007      	b.n	8000af8 <MCAL_GPIO_Init+0xda>

			}
			else	//GPIO_MODE_INPUT_PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	8812      	ldrh	r2, [r2, #0]
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	401a      	ands	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000af8:	7bfc      	ldrb	r4, [r7, #15]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff2a 	bl	8000958 <Get_CRLH_Position>
 8000b04:	4603      	mov	r3, r0
 8000b06:	fa04 f203 	lsl.w	r2, r4, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <MCAL_GPIO_ReadPin>:
 * @param[in]	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx, uint16_t PinNumber)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;
	if (((GPIOx->IDR) & PinNumber ) != (uint32_t)GPIO_PIN_RESET )	//reading 1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e001      	b.n	8000b3e <MCAL_GPIO_ReadPin+0x22>
	}
	else	//reading 0
	{
		bitstatus = GPIO_PIN_RESET ;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber,uint8_t Value)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	707b      	strb	r3, [r7, #1]
	if ( Value != GPIO_PIN_RESET )
 8000b5a:	787b      	ldrb	r3, [r7, #1]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <MCAL_GPIO_WritePin+0x1e>
		 *BSy: Port x Set bit y (y= 0 .. 15)
		 *These bits are write-only and can be accessed in Word mode only.
		 *0: No action on the corresponding ODRx bit
		 *1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000b60:	887a      	ldrh	r2, [r7, #2]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	611a      	str	r2, [r3, #16]
		 * 0: No action on the corresponding ODRx bit
		 * 1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8000b66:	e002      	b.n	8000b6e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	615a      	str	r2, [r3, #20]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <MCAL_GPIO_WritePort>:
 * @param[in]	-GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <__libc_init_array>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	2500      	movs	r5, #0
 8000b98:	4e0c      	ldr	r6, [pc, #48]	; (8000bcc <__libc_init_array+0x38>)
 8000b9a:	4c0d      	ldr	r4, [pc, #52]	; (8000bd0 <__libc_init_array+0x3c>)
 8000b9c:	1ba4      	subs	r4, r4, r6
 8000b9e:	10a4      	asrs	r4, r4, #2
 8000ba0:	42a5      	cmp	r5, r4
 8000ba2:	d109      	bne.n	8000bb8 <__libc_init_array+0x24>
 8000ba4:	f000 f81a 	bl	8000bdc <_init>
 8000ba8:	2500      	movs	r5, #0
 8000baa:	4e0a      	ldr	r6, [pc, #40]	; (8000bd4 <__libc_init_array+0x40>)
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <__libc_init_array+0x44>)
 8000bae:	1ba4      	subs	r4, r4, r6
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d105      	bne.n	8000bc2 <__libc_init_array+0x2e>
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bbc:	4798      	blx	r3
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	e7ee      	b.n	8000ba0 <__libc_init_array+0xc>
 8000bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bc6:	4798      	blx	r3
 8000bc8:	3501      	adds	r5, #1
 8000bca:	e7f2      	b.n	8000bb2 <__libc_init_array+0x1e>
 8000bcc:	08000c20 	.word	0x08000c20
 8000bd0:	08000c20 	.word	0x08000c20
 8000bd4:	08000c20 	.word	0x08000c20
 8000bd8:	08000c24 	.word	0x08000c24

08000bdc <_init>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	bf00      	nop
 8000be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be2:	bc08      	pop	{r3}
 8000be4:	469e      	mov	lr, r3
 8000be6:	4770      	bx	lr

08000be8 <_fini>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	bf00      	nop
 8000bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bee:	bc08      	pop	{r3}
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	4770      	bx	lr
