
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000068d  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	//Enable PD5 PD6 PD7 as output pins
	DDRD |= 0xE0;
  78:	a1 e3       	ldi	r26, 0x31	; 49
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e1 e3       	ldi	r30, 0x31	; 49
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	80 6e       	ori	r24, 0xE0	; 224
  84:	8c 93       	st	X, r24

	//Enable PD0 as input pin (Pull Down)
	DDRD &= ~(1<<PIND0);
  86:	a1 e3       	ldi	r26, 0x31	; 49
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e1 e3       	ldi	r30, 0x31	; 49
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	8c 93       	st	X, r24

	unsigned char counter = 0;
  94:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		//check if switch is pressed or not
		if(PIND & (1<<PIND0))
  96:	e0 e3       	ldi	r30, 0x30	; 48
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 2f       	mov	r24, r24
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	90 70       	andi	r25, 0x00	; 0
  a4:	88 23       	and	r24, r24
  a6:	b9 f3       	breq	.-18     	; 0x96 <main+0x2a>
		{
			counter++;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	89 83       	std	Y+1, r24	; 0x01
			while(PIND & (1<<PIND0));
  ae:	e0 e3       	ldi	r30, 0x30	; 48
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	88 23       	and	r24, r24
  be:	b9 f7       	brne	.-18     	; 0xae <main+0x42>
			switch (counter)
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	3b 83       	std	Y+3, r19	; 0x03
  c8:	2a 83       	std	Y+2, r18	; 0x02
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	9b 81       	ldd	r25, Y+3	; 0x03
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	81 f1       	breq	.+96     	; 0x134 <main+0xc8>
  d4:	2a 81       	ldd	r18, Y+2	; 0x02
  d6:	3b 81       	ldd	r19, Y+3	; 0x03
  d8:	24 30       	cpi	r18, 0x04	; 4
  da:	31 05       	cpc	r19, r1
  dc:	5c f4       	brge	.+22     	; 0xf4 <main+0x88>
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	9b 81       	ldd	r25, Y+3	; 0x03
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	91 05       	cpc	r25, r1
  e6:	b1 f0       	breq	.+44     	; 0x114 <main+0xa8>
  e8:	2a 81       	ldd	r18, Y+2	; 0x02
  ea:	3b 81       	ldd	r19, Y+3	; 0x03
  ec:	22 30       	cpi	r18, 0x02	; 2
  ee:	31 05       	cpc	r19, r1
  f0:	c9 f0       	breq	.+50     	; 0x124 <main+0xb8>
  f2:	41 c0       	rjmp	.+130    	; 0x176 <main+0x10a>
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	9b 81       	ldd	r25, Y+3	; 0x03
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	91 05       	cpc	r25, r1
  fc:	59 f1       	breq	.+86     	; 0x154 <main+0xe8>
  fe:	2a 81       	ldd	r18, Y+2	; 0x02
 100:	3b 81       	ldd	r19, Y+3	; 0x03
 102:	25 30       	cpi	r18, 0x05	; 5
 104:	31 05       	cpc	r19, r1
 106:	f4 f0       	brlt	.+60     	; 0x144 <main+0xd8>
 108:	8a 81       	ldd	r24, Y+2	; 0x02
 10a:	9b 81       	ldd	r25, Y+3	; 0x03
 10c:	86 30       	cpi	r24, 0x06	; 6
 10e:	91 05       	cpc	r25, r1
 110:	49 f1       	breq	.+82     	; 0x164 <main+0xf8>
 112:	31 c0       	rjmp	.+98     	; 0x176 <main+0x10a>
			{
			case 1:
				PORTD |= (1<<PD5);	//Turn on PD5
 114:	a2 e3       	ldi	r26, 0x32	; 50
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e2 e3       	ldi	r30, 0x32	; 50
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	8c 93       	st	X, r24
 122:	b9 cf       	rjmp	.-142    	; 0x96 <main+0x2a>
				break;
			case 2:
				PORTD |= 0x60;		//Turn on PD5 and PD6
 124:	a2 e3       	ldi	r26, 0x32	; 50
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e2 e3       	ldi	r30, 0x32	; 50
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 66       	ori	r24, 0x60	; 96
 130:	8c 93       	st	X, r24
 132:	b1 cf       	rjmp	.-158    	; 0x96 <main+0x2a>
				break;
			case 3:
				PORTD |= 0xE0;		//Turn on PD5, PD6 and PD7
 134:	a2 e3       	ldi	r26, 0x32	; 50
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e2 e3       	ldi	r30, 0x32	; 50
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 6e       	ori	r24, 0xE0	; 224
 140:	8c 93       	st	X, r24
 142:	a9 cf       	rjmp	.-174    	; 0x96 <main+0x2a>
				break;
			case 4:
				PORTD &= ~(1<<PD7);		//Turn off PD7 only
 144:	a2 e3       	ldi	r26, 0x32	; 50
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e2 e3       	ldi	r30, 0x32	; 50
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8c 93       	st	X, r24
 152:	a1 cf       	rjmp	.-190    	; 0x96 <main+0x2a>
				break;
			case 5:
				PORTD &= ~(1<<PD6);		//Turn off PD6 only
 154:	a2 e3       	ldi	r26, 0x32	; 50
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e2 e3       	ldi	r30, 0x32	; 50
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	8c 93       	st	X, r24
 162:	99 cf       	rjmp	.-206    	; 0x96 <main+0x2a>
				break;
			case 6:
				PORTD &= ~(1<<PD5);		//Turn off PD5
 164:	a2 e3       	ldi	r26, 0x32	; 50
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e2 e3       	ldi	r30, 0x32	; 50
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7d       	andi	r24, 0xDF	; 223
 170:	8c 93       	st	X, r24
				counter =0;				//reset counter
 172:	19 82       	std	Y+1, r1	; 0x01
 174:	90 cf       	rjmp	.-224    	; 0x96 <main+0x2a>
				break;
			default:
				PORTD &= ~0xE0;
 176:	a2 e3       	ldi	r26, 0x32	; 50
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e2 e3       	ldi	r30, 0x32	; 50
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 71       	andi	r24, 0x1F	; 31
 182:	8c 93       	st	X, r24
				counter =0;
 184:	19 82       	std	Y+1, r1	; 0x01
 186:	87 cf       	rjmp	.-242    	; 0x96 <main+0x2a>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
