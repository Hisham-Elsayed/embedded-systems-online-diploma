
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000de8  08000de8  00010df0  2**0
                  CONTENTS
  4 .ARM          00000000  08000de8  08000de8  00010df0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de8  08000df0  00010df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000df0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000df0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e22  00000000  00000000  00010e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009dd  00000000  00000000  00014c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009d8  00000000  00000000  00015618  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00015ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  000161b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000242f  00000000  00000000  00016318  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002262  00000000  00000000  00018747  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009375  00000000  00000000  0001a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023d1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  00023d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db4 	.word	0x08000db4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db4 	.word	0x08000db4

08000170 <my_wait>:

GPIO_PinConfig_t PinCfg ;

//Delay
void my_wait(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i , j;
	for(i=0 ; i<x ;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <my_wait+0x26>
	{
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <my_wait+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <my_wait+0x14>
	for(i=0 ; i<x ;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <my_wait+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_start>:

void LCD_start()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <LCD_start+0x28>)
 80001b4:	f000 fae1 	bl	800077a <MCAL_GPIO_WritePin>
	my_wait(50);
 80001b8:	2032      	movs	r0, #50	; 0x32
 80001ba:	f7ff ffd9 	bl	8000170 <my_wait>
	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	4802      	ldr	r0, [pc, #8]	; (80001d0 <LCD_start+0x28>)
 80001c6:	f000 fad8 	bl	800077a <MCAL_GPIO_WritePin>

}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800

080001d4 <LCD_init>:
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
}


void LCD_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	my_wait(20);
 80001d8:	2014      	movs	r0, #20
 80001da:	f7ff ffc9 	bl	8000170 <my_wait>

	//ENABLE_SWITCH ,RS, RW output with speed 10Mhz
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001de:	4b59      	ldr	r3, [pc, #356]	; (8000344 <LCD_init+0x170>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e6:	4b57      	ldr	r3, [pc, #348]	; (8000344 <LCD_init+0x170>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ec:	4b55      	ldr	r3, [pc, #340]	; (8000344 <LCD_init+0x170>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80001f2:	4954      	ldr	r1, [pc, #336]	; (8000344 <LCD_init+0x170>)
 80001f4:	4854      	ldr	r0, [pc, #336]	; (8000348 <LCD_init+0x174>)
 80001f6:	f000 fa41 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001fa:	4b52      	ldr	r3, [pc, #328]	; (8000344 <LCD_init+0x170>)
 80001fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000200:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000202:	4b50      	ldr	r3, [pc, #320]	; (8000344 <LCD_init+0x170>)
 8000204:	2204      	movs	r2, #4
 8000206:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	4b4e      	ldr	r3, [pc, #312]	; (8000344 <LCD_init+0x170>)
 800020a:	2201      	movs	r2, #1
 800020c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 800020e:	494d      	ldr	r1, [pc, #308]	; (8000344 <LCD_init+0x170>)
 8000210:	484d      	ldr	r0, [pc, #308]	; (8000348 <LCD_init+0x174>)
 8000212:	f000 fa33 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 8000216:	4b4b      	ldr	r3, [pc, #300]	; (8000344 <LCD_init+0x170>)
 8000218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800021c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021e:	4b49      	ldr	r3, [pc, #292]	; (8000344 <LCD_init+0x170>)
 8000220:	2204      	movs	r2, #4
 8000222:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000224:	4b47      	ldr	r3, [pc, #284]	; (8000344 <LCD_init+0x170>)
 8000226:	2201      	movs	r2, #1
 8000228:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 800022a:	4946      	ldr	r1, [pc, #280]	; (8000344 <LCD_init+0x170>)
 800022c:	4846      	ldr	r0, [pc, #280]	; (8000348 <LCD_init+0x174>)
 800022e:	f000 fa25 	bl	800067c <MCAL_GPIO_Init>

	//All Data Pins output with speed 10Mhz
	PinCfg.GPIO_PinNumber = GPIO_PIN_0 ;
 8000232:	4b44      	ldr	r3, [pc, #272]	; (8000344 <LCD_init+0x170>)
 8000234:	2201      	movs	r2, #1
 8000236:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000238:	4b42      	ldr	r3, [pc, #264]	; (8000344 <LCD_init+0x170>)
 800023a:	2204      	movs	r2, #4
 800023c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800023e:	4b41      	ldr	r3, [pc, #260]	; (8000344 <LCD_init+0x170>)
 8000240:	2201      	movs	r2, #1
 8000242:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000244:	493f      	ldr	r1, [pc, #252]	; (8000344 <LCD_init+0x170>)
 8000246:	4840      	ldr	r0, [pc, #256]	; (8000348 <LCD_init+0x174>)
 8000248:	f000 fa18 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1 ;
 800024c:	4b3d      	ldr	r3, [pc, #244]	; (8000344 <LCD_init+0x170>)
 800024e:	2202      	movs	r2, #2
 8000250:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000252:	4b3c      	ldr	r3, [pc, #240]	; (8000344 <LCD_init+0x170>)
 8000254:	2204      	movs	r2, #4
 8000256:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000258:	4b3a      	ldr	r3, [pc, #232]	; (8000344 <LCD_init+0x170>)
 800025a:	2201      	movs	r2, #1
 800025c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 800025e:	4939      	ldr	r1, [pc, #228]	; (8000344 <LCD_init+0x170>)
 8000260:	4839      	ldr	r0, [pc, #228]	; (8000348 <LCD_init+0x174>)
 8000262:	f000 fa0b 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000266:	4b37      	ldr	r3, [pc, #220]	; (8000344 <LCD_init+0x170>)
 8000268:	2204      	movs	r2, #4
 800026a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800026c:	4b35      	ldr	r3, [pc, #212]	; (8000344 <LCD_init+0x170>)
 800026e:	2204      	movs	r2, #4
 8000270:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000272:	4b34      	ldr	r3, [pc, #208]	; (8000344 <LCD_init+0x170>)
 8000274:	2201      	movs	r2, #1
 8000276:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000278:	4932      	ldr	r1, [pc, #200]	; (8000344 <LCD_init+0x170>)
 800027a:	4833      	ldr	r0, [pc, #204]	; (8000348 <LCD_init+0x174>)
 800027c:	f000 f9fe 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000280:	4b30      	ldr	r3, [pc, #192]	; (8000344 <LCD_init+0x170>)
 8000282:	2208      	movs	r2, #8
 8000284:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000286:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <LCD_init+0x170>)
 8000288:	2204      	movs	r2, #4
 800028a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <LCD_init+0x170>)
 800028e:	2201      	movs	r2, #1
 8000290:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 8000292:	492c      	ldr	r1, [pc, #176]	; (8000344 <LCD_init+0x170>)
 8000294:	482c      	ldr	r0, [pc, #176]	; (8000348 <LCD_init+0x174>)
 8000296:	f000 f9f1 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4 ;
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <LCD_init+0x170>)
 800029c:	2210      	movs	r2, #16
 800029e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002a0:	4b28      	ldr	r3, [pc, #160]	; (8000344 <LCD_init+0x170>)
 80002a2:	2204      	movs	r2, #4
 80002a4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002a6:	4b27      	ldr	r3, [pc, #156]	; (8000344 <LCD_init+0x170>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80002ac:	4925      	ldr	r1, [pc, #148]	; (8000344 <LCD_init+0x170>)
 80002ae:	4826      	ldr	r0, [pc, #152]	; (8000348 <LCD_init+0x174>)
 80002b0:	f000 f9e4 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5 ;
 80002b4:	4b23      	ldr	r3, [pc, #140]	; (8000344 <LCD_init+0x170>)
 80002b6:	2220      	movs	r2, #32
 80002b8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <LCD_init+0x170>)
 80002bc:	2204      	movs	r2, #4
 80002be:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <LCD_init+0x170>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80002c6:	491f      	ldr	r1, [pc, #124]	; (8000344 <LCD_init+0x170>)
 80002c8:	481f      	ldr	r0, [pc, #124]	; (8000348 <LCD_init+0x174>)
 80002ca:	f000 f9d7 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6 ;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <LCD_init+0x170>)
 80002d0:	2240      	movs	r2, #64	; 0x40
 80002d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <LCD_init+0x170>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002da:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <LCD_init+0x170>)
 80002dc:	2201      	movs	r2, #1
 80002de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80002e0:	4918      	ldr	r1, [pc, #96]	; (8000344 <LCD_init+0x170>)
 80002e2:	4819      	ldr	r0, [pc, #100]	; (8000348 <LCD_init+0x174>)
 80002e4:	f000 f9ca 	bl	800067c <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7 ;
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <LCD_init+0x170>)
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <LCD_init+0x170>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80002f4:	4b13      	ldr	r3, [pc, #76]	; (8000344 <LCD_init+0x170>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORTID, &PinCfg);
 80002fa:	4912      	ldr	r1, [pc, #72]	; (8000344 <LCD_init+0x170>)
 80002fc:	4812      	ldr	r0, [pc, #72]	; (8000348 <LCD_init+0x174>)
 80002fe:	f000 f9bd 	bl	800067c <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_PORTID, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	480f      	ldr	r0, [pc, #60]	; (8000348 <LCD_init+0x174>)
 800030a:	f000 fa36 	bl	800077a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LCD_init+0x174>)
 8000316:	f000 fa30 	bl	800077a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <LCD_init+0x174>)
 8000322:	f000 fa2a 	bl	800077a <MCAL_GPIO_WritePin>

	my_wait(15);
 8000326:	200f      	movs	r0, #15
 8000328:	f7ff ff22 	bl	8000170 <my_wait>
	LCD_PORTID &= ~(1<<ENABLE_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH);
	LCD_PORT_DATA_DIR = 0xFF;
	LCD_clear_screen();
	LCD_write_command(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_write_command(LCD_ENTRY_MODE);
 800032c:	2006      	movs	r0, #6
 800032e:	f000 f837 	bl	80003a0 <LCD_write_command>
	LCD_write_command(LCD_SET_CURSOR_LOCATION);
 8000332:	2080      	movs	r0, #128	; 0x80
 8000334:	f000 f834 	bl	80003a0 <LCD_write_command>
	LCD_write_command(LCD_CURSOR_ON);
 8000338:	200e      	movs	r0, #14
 800033a:	f000 f831 	bl	80003a0 <LCD_write_command>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000020 	.word	0x20000020
 8000348:	40010800 	.word	0x40010800

0800034c <LCD_goto_XY>:

void LCD_goto_XY(int line,int position)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	if(line == 1)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d10d      	bne.n	8000378 <LCD_goto_XY+0x2c>
	{
		if(position < 16 && position >= 0)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b0f      	cmp	r3, #15
 8000360:	dc1a      	bgt.n	8000398 <LCD_goto_XY+0x4c>
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	db17      	blt.n	8000398 <LCD_goto_XY+0x4c>
		{
			LCD_write_command(LCD_SET_CURSOR_LOCATION+position);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	3b80      	subs	r3, #128	; 0x80
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f815 	bl	80003a0 <LCD_write_command>
		if(position < 16 && position >= 0)
		{
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 8000376:	e00f      	b.n	8000398 <LCD_goto_XY+0x4c>
	else if(line == 2)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b02      	cmp	r3, #2
 800037c:	d10c      	bne.n	8000398 <LCD_goto_XY+0x4c>
		if(position < 16 && position >= 0)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b0f      	cmp	r3, #15
 8000382:	dc09      	bgt.n	8000398 <LCD_goto_XY+0x4c>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	db06      	blt.n	8000398 <LCD_goto_XY+0x4c>
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW+position);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	3b40      	subs	r3, #64	; 0x40
 8000390:	b2db      	uxtb	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f804 	bl	80003a0 <LCD_write_command>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <LCD_write_command>:

void LCD_write_command(unsigned char command)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();		//check if it is busy or not
	MCAL_GPIO_WritePort(LCD_PORTID, command);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	4619      	mov	r1, r3
 80003b0:	480a      	ldr	r0, [pc, #40]	; (80003dc <LCD_write_command+0x3c>)
 80003b2:	f000 f9f9 	bl	80007a8 <MCAL_GPIO_WritePort>
	//command mode
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <LCD_write_command+0x3c>)
 80003be:	f000 f9dc 	bl	800077a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <LCD_write_command+0x3c>)
 80003ca:	f000 f9d6 	bl	800077a <MCAL_GPIO_WritePin>
	LCD_start();
 80003ce:	f7ff feeb 	bl	80001a8 <LCD_start>
	//	LCD_start();
	//	LCD_PORTID = (LCD_PORTID & 0x0F) | (command << DATA_SHIFT);
	//	LCD_PORTID &= ~(1<<RW_SWITCH) | (1<<RS_SWITCH); 	//command mode
	//	LCD_start();
	//#endif
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010800 	.word	0x40010800

080003e0 <LCD_clear_screen>:

void LCD_clear_screen()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	LCD_write_command(LCD_CLEAR_COMMAND);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f7ff ffdb 	bl	80003a0 <LCD_write_command>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <LCD_write_char>:

void LCD_write_char(unsigned char data)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();		//check if it is busy or not
	MCAL_GPIO_WritePort(LCD_PORTID, data);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	480b      	ldr	r0, [pc, #44]	; (8000430 <LCD_write_char+0x40>)
 8000402:	f000 f9d1 	bl	80007a8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORTID, RS_SWITCH, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040c:	4808      	ldr	r0, [pc, #32]	; (8000430 <LCD_write_char+0x40>)
 800040e:	f000 f9b4 	bl	800077a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORTID, RW_SWITCH, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <LCD_write_char+0x40>)
 800041a:	f000 f9ae 	bl	800077a <MCAL_GPIO_WritePin>
	my_wait(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff fea6 	bl	8000170 <my_wait>
	LCD_start();
 8000424:	f7ff fec0 	bl	80001a8 <LCD_start>
	LCD_PORTID = (LCD_PORTID & 0x0F) | (data << DATA_SHIFT);
	LCD_PORTID &= ~(1<<RW_SWITCH);
	LCD_PORTID |= (1<<RS_SWITCH);		//data mode
	LCD_start();
#endif
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40010800 	.word	0x40010800

08000434 <LCD_write_string>:

void LCD_write_string(char* data)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	int counter = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 8000440:	e01c      	b.n	800047c <LCD_write_string+0x48>
	{
		counter++;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
		LCD_write_char(*data++);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ffcd 	bl	80003f0 <LCD_write_char>
		if(counter == 16)	//reached end of the line
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b10      	cmp	r3, #16
 800045a:	d104      	bne.n	8000466 <LCD_write_string+0x32>
		{
			LCD_goto_XY(2,0);
 800045c:	2100      	movs	r1, #0
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ff74 	bl	800034c <LCD_goto_XY>
 8000464:	e00a      	b.n	800047c <LCD_write_string+0x48>
		}
		else if(counter == 32)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b20      	cmp	r3, #32
 800046a:	d107      	bne.n	800047c <LCD_write_string+0x48>
		{
			LCD_clear_screen();
 800046c:	f7ff ffb8 	bl	80003e0 <LCD_clear_screen>
			LCD_goto_XY(1, 0);
 8000470:	2100      	movs	r1, #0
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff ff6a 	bl	800034c <LCD_goto_XY>
			counter =0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
	while(*data > 0)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1de      	bne.n	8000442 <LCD_write_string+0xe>
		}
	}
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <wait_ms>:
#include "keypad.h"
#include "lcd.h"

unsigned int IRQ_Flag = 0;

void wait_ms(uint32_t time) {
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	e00b      	b.n	80004b2 <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	e002      	b.n	80004a6 <wait_ms+0x1a>
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	2bfe      	cmp	r3, #254	; 0xfe
 80004aa:	d9f9      	bls.n	80004a0 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d3ef      	bcc.n	800049a <wait_ms+0xe>
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	IRQ_Flag=1;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <EXTI9_Callback+0x1c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
	LCD_write_string("IRQ EXTI9 _|- ");
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <EXTI9_Callback+0x20>)
 80004d0:	f7ff ffb0 	bl	8000434 <LCD_write_string>
	wait_ms(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f7ff ffd8 	bl	800048c <wait_ms>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000001c 	.word	0x2000001c
 80004e4:	08000dcc 	.word	0x08000dcc

080004e8 <main>:


int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN();
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <main+0x6c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <main+0x6c>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <main+0x6c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <main+0x6c>)
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <main+0x6c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <main+0x6c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]

	LCD_init();
 8000512:	f7ff fe5f 	bl	80001d4 <LCD_init>
	LCD_clear_screen();
 8000516:	f7ff ff63 	bl	80003e0 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 800051a:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <main+0x70>)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000524:	2300      	movs	r3, #0
 8000526:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x74>)
 800052a:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fafe 	bl	8000b34 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag =1;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0x78>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]

	/* Loop forever */
	while(1)
	{
		if(IRQ_Flag)
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x78>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0fb      	beq.n	800053e <main+0x56>
		{
			LCD_clear_screen();
 8000546:	f7ff ff4b 	bl	80003e0 <LCD_clear_screen>
			IRQ_Flag =0;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <main+0x78>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000550:	e7f5      	b.n	800053e <main+0x56>
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	08000ddc 	.word	0x08000ddc
 800055c:	080004c5 	.word	0x080004c5
 8000560:	2000001c 	.word	0x2000001c

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 fbeb 	bl	8000d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff ffa7 	bl	80004e8 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   r0, =_estack
 800059c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	08000df0 	.word	0x08000df0
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	20000060 	.word	0x20000060

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>

080005b6 <Get_CRLH_Position>:



//Function used to get the position
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d042      	beq.n	800064c <Get_CRLH_Position+0x96>
 80005c6:	2b80      	cmp	r3, #128	; 0x80
 80005c8:	dc11      	bgt.n	80005ee <Get_CRLH_Position+0x38>
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	d036      	beq.n	800063c <Get_CRLH_Position+0x86>
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	dc06      	bgt.n	80005e0 <Get_CRLH_Position+0x2a>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d02e      	beq.n	8000634 <Get_CRLH_Position+0x7e>
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d02e      	beq.n	8000638 <Get_CRLH_Position+0x82>
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d028      	beq.n	8000630 <Get_CRLH_Position+0x7a>
 80005de:	e047      	b.n	8000670 <Get_CRLH_Position+0xba>
 80005e0:	2b20      	cmp	r3, #32
 80005e2:	d02f      	beq.n	8000644 <Get_CRLH_Position+0x8e>
 80005e4:	2b40      	cmp	r3, #64	; 0x40
 80005e6:	d02f      	beq.n	8000648 <Get_CRLH_Position+0x92>
 80005e8:	2b10      	cmp	r3, #16
 80005ea:	d029      	beq.n	8000640 <Get_CRLH_Position+0x8a>
 80005ec:	e040      	b.n	8000670 <Get_CRLH_Position+0xba>
 80005ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005f2:	d033      	beq.n	800065c <Get_CRLH_Position+0xa6>
 80005f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005f8:	dc09      	bgt.n	800060e <Get_CRLH_Position+0x58>
 80005fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005fe:	d029      	beq.n	8000654 <Get_CRLH_Position+0x9e>
 8000600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000604:	d028      	beq.n	8000658 <Get_CRLH_Position+0xa2>
 8000606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800060a:	d021      	beq.n	8000650 <Get_CRLH_Position+0x9a>
 800060c:	e030      	b.n	8000670 <Get_CRLH_Position+0xba>
 800060e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000612:	d027      	beq.n	8000664 <Get_CRLH_Position+0xae>
 8000614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000618:	dc03      	bgt.n	8000622 <Get_CRLH_Position+0x6c>
 800061a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800061e:	d01f      	beq.n	8000660 <Get_CRLH_Position+0xaa>
 8000620:	e026      	b.n	8000670 <Get_CRLH_Position+0xba>
 8000622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000626:	d01f      	beq.n	8000668 <Get_CRLH_Position+0xb2>
 8000628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062c:	d01e      	beq.n	800066c <Get_CRLH_Position+0xb6>
 800062e:	e01f      	b.n	8000670 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000630:	2300      	movs	r3, #0
 8000632:	e01e      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000634:	2304      	movs	r3, #4
 8000636:	e01c      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000638:	2308      	movs	r3, #8
 800063a:	e01a      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800063c:	230c      	movs	r3, #12
 800063e:	e018      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000640:	2310      	movs	r3, #16
 8000642:	e016      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000644:	2314      	movs	r3, #20
 8000646:	e014      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000648:	2318      	movs	r3, #24
 800064a:	e012      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800064c:	231c      	movs	r3, #28
 800064e:	e010      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000650:	2300      	movs	r3, #0
 8000652:	e00e      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000654:	2304      	movs	r3, #4
 8000656:	e00c      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000658:	2308      	movs	r3, #8
 800065a:	e00a      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800065c:	230c      	movs	r3, #12
 800065e:	e008      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000660:	2310      	movs	r3, #16
 8000662:	e006      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000664:	2314      	movs	r3, #20
 8000666:	e004      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000668:	2318      	movs	r3, #24
 800066a:	e002      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800066c:	231c      	movs	r3, #28
 800066e:	e000      	b.n	8000672 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) Configures PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) Configures PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL : &GPIOx->CRH ;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	2bff      	cmp	r3, #255	; 0xff
 8000694:	d801      	bhi.n	800069a <MCAL_GPIO_Init+0x1e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	e001      	b.n	800069e <MCAL_GPIO_Init+0x22>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3304      	adds	r3, #4
 800069e:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~( 0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber) ) ;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff86 	bl	80005b6 <Get_CRLH_Position>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	230f      	movs	r3, #15
 80006b0:	4093      	lsls	r3, r2
 80006b2:	43da      	mvns	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	401a      	ands	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	d00b      	beq.n	80006de <MCAL_GPIO_Init+0x62>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d007      	beq.n	80006de <MCAL_GPIO_Init+0x62>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	d003      	beq.n	80006de <MCAL_GPIO_Init+0x62>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	789b      	ldrb	r3, [r3, #2]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d10e      	bne.n	80006fc <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	789b      	ldrb	r3, [r3, #2]
 80006e2:	3b04      	subs	r3, #4
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e02c      	b.n	8000756 <MCAL_GPIO_Init+0xda>

	}
	//if Pin is input
	else	//MODE = 00: Input mode (reset state)
	{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d003      	beq.n	800070c <MCAL_GPIO_Init+0x90>
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d107      	bne.n	800071c <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE ) << 2) | 0x0) & 0x0F ) ;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	789b      	ldrb	r3, [r3, #2]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e01c      	b.n	8000756 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)		//Consider it as input floating
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b08      	cmp	r3, #8
 8000722:	d102      	bne.n	800072a <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLOAT ) << 2) | 0x0) & 0x0F ) ;
 8000724:	2304      	movs	r3, #4
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e015      	b.n	8000756 <MCAL_GPIO_Init+0xda>
		}
		else	//PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU ) << 2) | 0x0) & 0x0F ) ;
 800072a:	2308      	movs	r3, #8
 800072c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d107      	bne.n	8000746 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	431a      	orrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	e007      	b.n	8000756 <MCAL_GPIO_Init+0xda>

			}
			else	//GPIO_MODE_INPUT_PD
			{
				//Table 20. Port bit configuration table PxODR 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	8812      	ldrh	r2, [r2, #0]
 800074e:	43d2      	mvns	r2, r2
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000756:	7bfc      	ldrb	r4, [r7, #15]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff2a 	bl	80005b6 <Get_CRLH_Position>
 8000762:	4603      	mov	r3, r0
 8000764:	fa04 f203 	lsl.w	r2, r4, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	431a      	orrs	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}

0800077a <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber,uint8_t Value)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	460b      	mov	r3, r1
 8000784:	807b      	strh	r3, [r7, #2]
 8000786:	4613      	mov	r3, r2
 8000788:	707b      	strb	r3, [r7, #1]
	if ( Value != GPIO_PIN_RESET )
 800078a:	787b      	ldrb	r3, [r7, #1]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <MCAL_GPIO_WritePin+0x1e>
		 *BSy: Port x Set bit y (y= 0 .. 15)
		 *These bits are write-only and can be accessed in Word mode only.
		 *0: No action on the corresponding ODRx bit
		 *1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	611a      	str	r2, [r3, #16]
		 * 0: No action on the corresponding ODRx bit
		 * 1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8000796:	e002      	b.n	800079e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000798:	887a      	ldrh	r2, [r7, #2]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	615a      	str	r2, [r3, #20]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <MCAL_GPIO_WritePort>:
 * @param[in]	-GPIOx: where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx, uint16_t Value)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 80007b4:	887a      	ldrh	r2, [r7, #2]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60da      	str	r2, [r3, #12]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <Enable_NVIC>:

/***********************************************************************************************************
 *                                          Generic Functions                                              *
 ***********************************************************************************************************/
void Enable_NVIC (uint16_t IRQ)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d854      	bhi.n	800087e <Enable_NVIC+0xba>
 80007d4:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <Enable_NVIC+0x18>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	0800081d 	.word	0x0800081d
 80007e0:	0800082b 	.word	0x0800082b
 80007e4:	08000839 	.word	0x08000839
 80007e8:	08000847 	.word	0x08000847
 80007ec:	08000855 	.word	0x08000855
 80007f0:	08000863 	.word	0x08000863
 80007f4:	08000863 	.word	0x08000863
 80007f8:	08000863 	.word	0x08000863
 80007fc:	08000863 	.word	0x08000863
 8000800:	08000863 	.word	0x08000863
 8000804:	08000871 	.word	0x08000871
 8000808:	08000871 	.word	0x08000871
 800080c:	08000871 	.word	0x08000871
 8000810:	08000871 	.word	0x08000871
 8000814:	08000871 	.word	0x08000871
 8000818:	08000871 	.word	0x08000871
	{
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <Enable_NVIC+0xc4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <Enable_NVIC+0xc4>)
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	6013      	str	r3, [r2, #0]
		break;
 8000828:	e029      	b.n	800087e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ6_EXTI1_ENABLE;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <Enable_NVIC+0xc4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <Enable_NVIC+0xc4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6013      	str	r3, [r2, #0]
		break;
 8000836:	e022      	b.n	800087e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ6_EXTI2_ENABLE;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <Enable_NVIC+0xc4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <Enable_NVIC+0xc4>)
 800083e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000842:	6013      	str	r3, [r2, #0]
		break;
 8000844:	e01b      	b.n	800087e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ6_EXTI3_ENABLE;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <Enable_NVIC+0xc4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <Enable_NVIC+0xc4>)
 800084c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000850:	6013      	str	r3, [r2, #0]
		break;
 8000852:	e014      	b.n	800087e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ6_EXTI4_ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <Enable_NVIC+0xc4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <Enable_NVIC+0xc4>)
 800085a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085e:	6013      	str	r3, [r2, #0]
		break;
 8000860:	e00d      	b.n	800087e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ6_EXTI5_9_ENABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <Enable_NVIC+0xc4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <Enable_NVIC+0xc4>)
 8000868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800086c:	6013      	str	r3, [r2, #0]
		break;
 800086e:	e006      	b.n	800087e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ6_EXTI10_15_ENABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <Enable_NVIC+0xc8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <Enable_NVIC+0xc8>)
 8000876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087a:	6013      	str	r3, [r2, #0]
		break;
 800087c:	bf00      	nop
	}
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000e104 	.word	0xe000e104

08000890 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d854      	bhi.n	800094a <Disable_NVIC+0xba>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <Disable_NVIC+0x18>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008e9 	.word	0x080008e9
 80008ac:	080008f7 	.word	0x080008f7
 80008b0:	08000905 	.word	0x08000905
 80008b4:	08000913 	.word	0x08000913
 80008b8:	08000921 	.word	0x08000921
 80008bc:	0800092f 	.word	0x0800092f
 80008c0:	0800092f 	.word	0x0800092f
 80008c4:	0800092f 	.word	0x0800092f
 80008c8:	0800092f 	.word	0x0800092f
 80008cc:	0800092f 	.word	0x0800092f
 80008d0:	0800093d 	.word	0x0800093d
 80008d4:	0800093d 	.word	0x0800093d
 80008d8:	0800093d 	.word	0x0800093d
 80008dc:	0800093d 	.word	0x0800093d
 80008e0:	0800093d 	.word	0x0800093d
 80008e4:	0800093d 	.word	0x0800093d
	{
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <Disable_NVIC+0xc4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <Disable_NVIC+0xc4>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f2:	6013      	str	r3, [r2, #0]
		break;
 80008f4:	e029      	b.n	800094a <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ6_EXTI1_DISABLE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <Disable_NVIC+0xc4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <Disable_NVIC+0xc4>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6013      	str	r3, [r2, #0]
		break;
 8000902:	e022      	b.n	800094a <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ6_EXTI2_DISABLE;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <Disable_NVIC+0xc4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <Disable_NVIC+0xc4>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
		break;
 8000910:	e01b      	b.n	800094a <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ6_EXTI3_DISABLE;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <Disable_NVIC+0xc4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <Disable_NVIC+0xc4>)
 8000918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091c:	6013      	str	r3, [r2, #0]
		break;
 800091e:	e014      	b.n	800094a <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ6_EXTI4_DISABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <Disable_NVIC+0xc4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <Disable_NVIC+0xc4>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
		break;
 800092c:	e00d      	b.n	800094a <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ6_EXTI5_9_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <Disable_NVIC+0xc4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <Disable_NVIC+0xc4>)
 8000934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000938:	6013      	str	r3, [r2, #0]
		break;
 800093a:	e006      	b.n	800094a <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ6_EXTI10_15_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <Disable_NVIC+0xc8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <Disable_NVIC+0xc8>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
		break;
 8000948:	bf00      	nop
	}
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	e000e180 	.word	0xe000e180
 8000958:	e000e184 	.word	0xe000e184

0800095c <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input -> Floating INPUT
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN ;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	891b      	ldrh	r3, [r3, #8]
 8000968:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOAT ;
 800096a:	2301      	movs	r3, #1
 800096c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg) ;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f107 0208 	add.w	r2, r7, #8
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe7f 	bl	800067c <MCAL_GPIO_Init>
	//==================================================================
	//2- Update AFIO to Route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	b29b      	uxth	r3, r3
 8000986:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_postion = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_postion) ;
 8000998:	4a5f      	ldr	r2, [pc, #380]	; (8000b18 <Update_EXTI+0x1bc>)
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	3302      	adds	r3, #2
 800099e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	210f      	movs	r1, #15
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	495a      	ldr	r1, [pc, #360]	; (8000b18 <Update_EXTI+0x1bc>)
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4002      	ands	r2, r0
 80009b4:	3302      	adds	r3, #2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF)<< AFIO_EXTICR_postion) ;
 80009ba:	4a57      	ldr	r2, [pc, #348]	; (8000b18 <Update_EXTI+0x1bc>)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4954      	ldr	r1, [pc, #336]	; (8000b1c <Update_EXTI+0x1c0>)
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d016      	beq.n	80009fc <Update_EXTI+0xa0>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4953      	ldr	r1, [pc, #332]	; (8000b20 <Update_EXTI+0x1c4>)
 80009d4:	428b      	cmp	r3, r1
 80009d6:	d00f      	beq.n	80009f8 <Update_EXTI+0x9c>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4951      	ldr	r1, [pc, #324]	; (8000b24 <Update_EXTI+0x1c8>)
 80009de:	428b      	cmp	r3, r1
 80009e0:	d008      	beq.n	80009f4 <Update_EXTI+0x98>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	4950      	ldr	r1, [pc, #320]	; (8000b28 <Update_EXTI+0x1cc>)
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d101      	bne.n	80009f0 <Update_EXTI+0x94>
 80009ec:	2303      	movs	r3, #3
 80009ee:	e006      	b.n	80009fe <Update_EXTI+0xa2>
 80009f0:	2300      	movs	r3, #0
 80009f2:	e004      	b.n	80009fe <Update_EXTI+0xa2>
 80009f4:	2302      	movs	r3, #2
 80009f6:	e002      	b.n	80009fe <Update_EXTI+0xa2>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <Update_EXTI+0xa2>
 80009fc:	2300      	movs	r3, #0
 80009fe:	7bb9      	ldrb	r1, [r7, #14]
 8000a00:	408b      	lsls	r3, r1
 8000a02:	4618      	mov	r0, r3
 8000a04:	4944      	ldr	r1, [pc, #272]	; (8000b18 <Update_EXTI+0x1bc>)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	4302      	orrs	r2, r0
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==================================================================
	//3- Update Rising or Falling Register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a10:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	408a      	lsls	r2, r1
 8000a1e:	43d2      	mvns	r2, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a42      	ldr	r2, [pc, #264]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a24:	400b      	ands	r3, r1
 8000a26:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a28:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	8812      	ldrh	r2, [r2, #0]
 8000a30:	4611      	mov	r1, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	408a      	lsls	r2, r1
 8000a36:	43d2      	mvns	r2, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a3c      	ldr	r2, [pc, #240]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7b1b      	ldrb	r3, [r3, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10b      	bne.n	8000a60 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	8812      	ldrh	r2, [r2, #0]
 8000a50:	4611      	mov	r1, r2
 8000a52:	2201      	movs	r2, #1
 8000a54:	408a      	lsls	r2, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a34      	ldr	r2, [pc, #208]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6093      	str	r3, [r2, #8]
 8000a5e:	e029      	b.n	8000ab4 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7b1b      	ldrb	r3, [r3, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d10b      	bne.n	8000a80 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	4611      	mov	r1, r2
 8000a72:	2201      	movs	r2, #1
 8000a74:	408a      	lsls	r2, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	60d3      	str	r3, [r2, #12]
 8000a7e:	e019      	b.n	8000ab4 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7b1b      	ldrb	r3, [r3, #12]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d115      	bne.n	8000ab4 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	8812      	ldrh	r2, [r2, #0]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <Update_EXTI+0x1d0>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <Update_EXTI+0x1d0>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <Update_EXTI+0x1d0>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	60d3      	str	r3, [r2, #12]
	}
	//==================================================================
	//4- Update IRQ Handling CALLBACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <Update_EXTI+0x1d4>)
 8000ac0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//==================================================================
	//5- Enable/Disable IRQ EXTI & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7b5b      	ldrb	r3, [r3, #13]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d110      	bne.n	8000aee <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <Update_EXTI+0x1d0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	8812      	ldrh	r2, [r2, #0]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	408a      	lsls	r2, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <Update_EXTI+0x1d0>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe6c 	bl	80007c4 <Enable_NVIC>
	else
	{
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 8000aec:	e010      	b.n	8000b10 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <Update_EXTI+0x1d0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	8812      	ldrh	r2, [r2, #0]
 8000af6:	4611      	mov	r1, r2
 8000af8:	2201      	movs	r2, #1
 8000afa:	408a      	lsls	r2, r1
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <Update_EXTI+0x1d0>)
 8000b02:	400b      	ands	r3, r1
 8000b04:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fec0 	bl	8000890 <Disable_NVIC>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
 8000b30:	20000024 	.word	0x20000024

08000b34 <MCAL_EXTI_GPIO_Init>:
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					- but LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 * 					- Also Mandatory to enable RCC clock for AFIO and corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff0d 	bl	800095c <Update_EXTI>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <EXTI0_IRQHandler>:
/***********************************************************************************************************
 *                                          ISR Functions		                                           *
 ***********************************************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <EXTI0_IRQHandler+0x1c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EXTI0_IRQHandler+0x1c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <EXTI0_IRQHandler+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4798      	blx	r3
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010400 	.word	0x40010400
 8000b6c:	20000024 	.word	0x20000024

08000b70 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <EXTI1_IRQHandler+0x1c>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <EXTI1_IRQHandler+0x1c>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <EXTI1_IRQHandler+0x20>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4798      	blx	r3
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010400 	.word	0x40010400
 8000b90:	20000024 	.word	0x20000024

08000b94 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <EXTI2_IRQHandler+0x1c>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <EXTI2_IRQHandler+0x1c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <EXTI2_IRQHandler+0x20>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4798      	blx	r3
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010400 	.word	0x40010400
 8000bb4:	20000024 	.word	0x20000024

08000bb8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <EXTI3_IRQHandler+0x1c>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <EXTI3_IRQHandler+0x1c>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <EXTI3_IRQHandler+0x20>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4798      	blx	r3
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010400 	.word	0x40010400
 8000bd8:	20000024 	.word	0x20000024

08000bdc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <EXTI4_IRQHandler+0x1c>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <EXTI4_IRQHandler+0x1c>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <EXTI4_IRQHandler+0x20>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	4798      	blx	r3
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010400 	.word	0x40010400
 8000bfc:	20000024 	.word	0x20000024

08000c00 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d008      	beq.n	8000c22 <EXTI9_5_IRQHandler+0x22>
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	6153      	str	r3, [r2, #20]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <EXTI9_5_IRQHandler+0xa4>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <EXTI9_5_IRQHandler+0x40>
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <EXTI9_5_IRQHandler+0xa4>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <EXTI9_5_IRQHandler+0x5e>
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <EXTI9_5_IRQHandler+0xa4>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d008      	beq.n	8000c7c <EXTI9_5_IRQHandler+0x7c>
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <EXTI9_5_IRQHandler+0xa4>)
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d008      	beq.n	8000c9a <EXTI9_5_IRQHandler+0x9a>
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <EXTI9_5_IRQHandler+0xa0>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6153      	str	r3, [r2, #20]
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <EXTI9_5_IRQHandler+0xa4>)
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	4798      	blx	r3
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010400 	.word	0x40010400
 8000ca4:	20000024 	.word	0x20000024

08000ca8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d008      	beq.n	8000cca <EXTI15_10_IRQHandler+0x22>
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6153      	str	r3, [r2, #20]
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <EXTI15_10_IRQHandler+0x40>
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <EXTI15_10_IRQHandler+0x5e>
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfe:	6153      	str	r3, [r2, #20]
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <EXTI15_10_IRQHandler+0x7c>
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d22:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d008      	beq.n	8000d42 <EXTI15_10_IRQHandler+0x9a>
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d40:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <EXTI15_10_IRQHandler+0xb8>
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <EXTI15_10_IRQHandler+0xbc>)
 8000d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <EXTI15_10_IRQHandler+0xc0>)
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	4798      	blx	r3
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010400 	.word	0x40010400
 8000d68:	20000024 	.word	0x20000024

08000d6c <__libc_init_array>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	2500      	movs	r5, #0
 8000d70:	4e0c      	ldr	r6, [pc, #48]	; (8000da4 <__libc_init_array+0x38>)
 8000d72:	4c0d      	ldr	r4, [pc, #52]	; (8000da8 <__libc_init_array+0x3c>)
 8000d74:	1ba4      	subs	r4, r4, r6
 8000d76:	10a4      	asrs	r4, r4, #2
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	d109      	bne.n	8000d90 <__libc_init_array+0x24>
 8000d7c:	f000 f81a 	bl	8000db4 <_init>
 8000d80:	2500      	movs	r5, #0
 8000d82:	4e0a      	ldr	r6, [pc, #40]	; (8000dac <__libc_init_array+0x40>)
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <__libc_init_array+0x44>)
 8000d86:	1ba4      	subs	r4, r4, r6
 8000d88:	10a4      	asrs	r4, r4, #2
 8000d8a:	42a5      	cmp	r5, r4
 8000d8c:	d105      	bne.n	8000d9a <__libc_init_array+0x2e>
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d94:	4798      	blx	r3
 8000d96:	3501      	adds	r5, #1
 8000d98:	e7ee      	b.n	8000d78 <__libc_init_array+0xc>
 8000d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d9e:	4798      	blx	r3
 8000da0:	3501      	adds	r5, #1
 8000da2:	e7f2      	b.n	8000d8a <__libc_init_array+0x1e>
 8000da4:	08000de8 	.word	0x08000de8
 8000da8:	08000de8 	.word	0x08000de8
 8000dac:	08000de8 	.word	0x08000de8
 8000db0:	08000dec 	.word	0x08000dec

08000db4 <_init>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	bf00      	nop
 8000db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dba:	bc08      	pop	{r3}
 8000dbc:	469e      	mov	lr, r3
 8000dbe:	4770      	bx	lr

08000dc0 <_fini>:
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	bf00      	nop
 8000dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc6:	bc08      	pop	{r3}
 8000dc8:	469e      	mov	lr, r3
 8000dca:	4770      	bx	lr
